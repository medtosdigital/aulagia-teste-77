
import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2.7.1'

const openAIApiKey = Deno.env.get('OPENAI_API_KEY');
const supabaseUrl = Deno.env.get('SUPABASE_URL')!;
const supabaseServiceKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!;

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

// Fun√ß√£o para gerar imagem via edge function gerarImagemIA
async function generateImage(prompt: string, imageType: string): Promise<string> {
  try {
    console.log(`üé® [IMAGEM-${imageType.toUpperCase()}] Iniciando gera√ß√£o com prompt:`, prompt);
    
    const response = await fetch(`${supabaseUrl}/functions/v1/gerarImagemIA`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${supabaseServiceKey}`,
      },
      body: JSON.stringify({ prompt: prompt }),
    });

    if (!response.ok) {
      console.error(`‚ùå [IMAGEM-${imageType.toUpperCase()}] Erro HTTP:`, response.status, response.statusText);
      throw new Error(`Falha na gera√ß√£o de imagem ${imageType}: HTTP ${response.status}`);
    }

    const result = await response.json();
    if (result.success && result.imageUrl) {
      console.log(`‚úÖ [IMAGEM-${imageType.toUpperCase()}] Gera√ß√£o conclu√≠da com sucesso`);
      return result.imageUrl;
    } else {
      console.error(`‚ùå [IMAGEM-${imageType.toUpperCase()}] Falha na resposta:`, result.error);
      throw new Error(`Erro na gera√ß√£o de ${imageType}: ${result.error}`);
    }
  } catch (error) {
    console.error(`‚ùå [IMAGEM-${imageType.toUpperCase()}] Erro durante gera√ß√£o:`, error);
    throw error;
  }
}

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { materialType, formData } = await req.json();
    console.log('üü¢ [IN√çCIO] Requisi√ß√£o recebida para gera√ß√£o de material.');
    console.log(`üì• [DADOS] Tipo de material: ${materialType}`);
    console.log(`üì• [DADOS] Tema: ${formData.tema || formData.topic || ''}`);
    console.log(`üì• [DADOS] Disciplina: ${formData.disciplina || formData.subject || ''}`);
    console.log(`üì• [DADOS] S√©rie: ${formData.serie || formData.grade || ''}`);
    if (formData.duracao) console.log(`üì• [DADOS] Dura√ß√£o: ${formData.duracao}`);
    if (formData.professor) console.log(`üì• [DADOS] Professor: ${formData.professor}`);
    if (formData.numeroQuestoes || formData.quantidadeQuestoes) console.log(`üì• [DADOS] N√∫mero de quest√µes: ${formData.numeroQuestoes || formData.quantidadeQuestoes}`);

    if (!openAIApiKey) {
      console.error('‚ùå [ERRO] OpenAI API key n√£o configurada');
      throw new Error('OpenAI API key not configured');
    }

    // Extrair informa√ß√µes espec√≠ficas
    const temaEspecifico = formData.tema || formData.topic || '';
    const disciplina = formData.disciplina || formData.subject || '';
    const serie = formData.serie || formData.grade || '';

    console.log('üéØ [TEMA] Tema espec√≠fico:', temaEspecifico);
    console.log('üìö [DISCIPLINA] Disciplina:', disciplina);
    console.log('üéì [S√âRIE] S√©rie:', serie);

    if (!temaEspecifico.trim()) {
      throw new Error('Tema n√£o fornecido no formData');
    }

    let prompt = '';
    let systemMessage = '';

    // ETAPA 1: DEFINIR PROMPTS PARA GERA√á√ÉO DE TEXTO
    console.log('üìù [PROMPT] Preparando prompt e systemMessage para o tipo de material:', materialType);

    if (materialType === 'slides') {
      systemMessage = `Voc√™ √© um especialista em cria√ß√£o de materiais educacionais ESPEC√çFICOS para apresenta√ß√µes de slides.

REGRAS OBRIGAT√ìRIAS:
1. TODO o conte√∫do DEVE ser especificamente sobre "${temaEspecifico}"
2. NUNCA mencione temas diferentes de "${temaEspecifico}"
3. Todas as vari√°veis devem conter informa√ß√µes EXCLUSIVAMENTE sobre "${temaEspecifico}"
4. Os prompts de imagem devem ilustrar APENAS conceitos de "${temaEspecifico}"

ESTRUTURA JSON OBRIGAT√ìRIA:
{
  "tema": "string - DEVE conter '${temaEspecifico}' no t√≠tulo",
  "disciplina": "${disciplina}",
  "serie": "${serie}",
  "professor": "${formData.professor || 'Professor(a)'}",
  "objetivos": ["objetivo 1 sobre ${temaEspecifico}", "objetivo 2 sobre ${temaEspecifico}", "objetivo 3 sobre ${temaEspecifico}"],
  "introducao": "string - introdu√ß√£o espec√≠fica sobre ${temaEspecifico}",
  "conceitos": "string - conceitos principais de ${temaEspecifico}",
  "desenvolvimento_1": "string - primeiro aspecto de ${temaEspecifico}",
  "desenvolvimento_2": "string - segundo aspecto de ${temaEspecifico}",
  "desenvolvimento_3": "string - terceiro aspecto de ${temaEspecifico}",
  "desenvolvimento_4": "string - quarto aspecto de ${temaEspecifico}",
  "exemplo": "string - exemplo pr√°tico de ${temaEspecifico}",
  "atividade": "string - atividade sobre ${temaEspecifico}",
  "resumo": "string - resumo de ${temaEspecifico}",
  "conclusao": "string - conclus√£o sobre ${temaEspecifico}",
  "tema_imagem_prompt": "Ilustra√ß√£o educativa brasileira sobre ${temaEspecifico} para ${disciplina}, s√©rie ${serie}, capa atraente",
  "introducao_imagem_prompt": "Introdu√ß√£o visual educativa sobre ${temaEspecifico}, conceitos b√°sicos para ${disciplina} ${serie}",
  "conceitos_imagem_prompt": "Diagrama educativo dos conceitos principais de ${temaEspecifico} para ${disciplina} ${serie}",
  "desenvolvimento_1_imagem_prompt": "Ilustra√ß√£o espec√≠fica do primeiro aspecto de ${temaEspecifico} em ${disciplina} para ${serie}",
  "desenvolvimento_2_imagem_prompt": "Ilustra√ß√£o espec√≠fica do segundo aspecto de ${temaEspecifico} em ${disciplina} para ${serie}",
  "desenvolvimento_3_imagem_prompt": "Ilustra√ß√£o espec√≠fica do terceiro aspecto de ${temaEspecifico} em ${disciplina} para ${serie}",
  "desenvolvimento_4_imagem_prompt": "Ilustra√ß√£o espec√≠fica do quarto aspecto de ${temaEspecifico} em ${disciplina} para ${serie}",
  "exemplo_imagem_prompt": "Exemplo visual pr√°tico de ${temaEspecifico} aplicado em ${disciplina} para ${serie}"
}

Retorne APENAS o JSON v√°lido, sem markdown ou explica√ß√µes.`;

      prompt = `Crie uma apresenta√ß√£o educacional COMPLETA e ESPEC√çFICA sobre "${temaEspecifico}".

DADOS DO MATERIAL:
- Tema: ${temaEspecifico}
- Disciplina: ${disciplina}
- S√©rie: ${serie}
- Professor: ${formData.professor || 'Professor(a)'}

INSTRU√á√ïES CR√çTICAS:
1. TODOS os textos devem ser sobre "${temaEspecifico}" EXCLUSIVAMENTE
2. N√ÉO mencione outros temas al√©m de "${temaEspecifico}"
3. Use linguagem adequada para ${serie}
4. Foque em conceitos, exemplos e aplica√ß√µes espec√≠ficas de "${temaEspecifico}"
5. Cada campo do JSON deve conter conte√∫do educativo espec√≠fico sobre "${temaEspecifico}"
6. Os prompts de imagem devem ser MUITO espec√≠ficos sobre "${temaEspecifico}"

VALIDA√á√ÉO: Se o JSON gerado mencionar qualquer tema diferente de "${temaEspecifico}", refa√ßa completamente.

Retorne APENAS o JSON com conte√∫do espec√≠fico sobre "${temaEspecifico}".`;
      console.log('üìù [PROMPT] Prompt e systemMessage para SLIDES prontos.');

    } else if (materialType === 'plano-de-aula') {
      systemMessage = `Voc√™ √© um especialista em educa√ß√£o brasileira, pedagogo experiente e profundo conhecedor da BNCC. Crie um plano de aula DETALHADO e ESPEC√çFICO sobre o tema "${formData.tema}" para a disciplina "${formData.disciplina}", voltado para a s√©rie/ano "${formData.serie}".`;

      prompt = `INSTRU√á√ïES IMPORTANTES:
- O tema "${formData.tema}" deve ser o FOCO CENTRAL de todas as se√ß√µes do plano.
- O tempo total da aula deve ser respeitado: ${formData.duracao || '50 minutos'} minutos.  
  > Exemplo: 50 min (1 aula), 100 min (2 aulas). Distribua esse tempo nas etapas: Introdu√ß√£o, Desenvolvimento, Pr√°tica e Fechamento.
- Os **objetivos devem ser exatamente 3**, claros e diretamente relacionados ao tema.
- As **habilidades da BNCC devem variar de 1 a 5**, com c√≥digos e descri√ß√µes reais e compat√≠veis com o tema e disciplina.
- Utilize **metodologias ativas e participativas**, apropriadas √† faixa et√°ria e ao conte√∫do.
- As **refer√™ncias** devem estar no formato **ABNT**, podendo ser:
  - **Livros impressos** (autor, t√≠tulo, edi√ß√£o, local, editora, ano)
  - **Sites** (autor, t√≠tulo, nome do site, ano, link, data de acesso)
- Responda apenas com um JSON v√°lido. Nenhum texto fora do JSON.

### ‚úÖ Estrutura obrigat√≥ria do JSON:

{
  "titulo": "T√≠tulo espec√≠fico e claro sobre ${formData.tema}",
  "professor": "${formData.professor || 'Professor(a)'}",
  "data": "${formData.data || new Date().toLocaleDateString('pt-BR')}",
  "disciplina": "${formData.disciplina}",
  "serie": "${formData.serie}",
  "tema": "${formData.tema}",
  "duracao": "${formData.duracao || '50 minutos'}",
  "bncc": [
    "C√≥digo e descri√ß√£o da habilidade da BNCC relacionada ao tema"
  ],
  "objetivos": [
    "Objetivo 1 espec√≠fico sobre o tema",
    "Objetivo 2 espec√≠fico sobre o tema",
    "Objetivo 3 espec√≠fico sobre o tema"
  ],
  "habilidades": [
    {
      "codigo espec√≠fico sobre o tema": "EFxxLPxx",
      "descricao": "Descri√ß√£o do c√≥digo da habilidade relacionada ao tema"
    }
    // at√© 5 itens neste array
  ],
  "conteudosProgramaticos": [
    "Conte√∫do program√°tico 1 sobre ${formData.tema}",
    "Conte√∫do program√°tico 2 sobre ${formData.tema}"
  ],
  "desenvolvimento": [
    {
      "etapa": "Introdu√ß√£o",
      "tempo": "xx minutos",
      "atividade": "Atividade inicial sobre o tema",
      "recursos": "Recursos para introdu√ß√£o"
    },
    {
      "etapa": "Desenvolvimento",
      "tempo": "xx minutos",
      "atividade": "Atividade principal sobre o tema",
      "recursos": "Recursos principais"
    },
    {
      "etapa": "Pr√°tica",
      "tempo": "xx minutos",
      "atividade": "Atividade pr√°tica",
      "recursos": "Materiais pr√°ticos"
    },
    {
      "etapa": "Fechamento",
      "tempo": "xx minutos",
      "atividade": "Revis√£o e encerramento",
      "recursos": "Recursos de fechamento"
    }
  ],
  "recursos": [
    "Recurso 1 relacionado ao tema",
    "Recurso 2 relacionado ao tema"
  ],
  "metodologia": "Descrever metodologia ativa aplicada ao tema",
  "avaliacao": "Crit√©rios de avalia√ß√£o da aprendizagem sobre o tema",
  "referencias": [
    "SOBRENOME, Nome. T√≠tulo da obra. Edi√ß√£o. Local: Editora, ano.",
    "SOBRENOME, Nome. T√≠tulo da p√°gina. Nome do site, ano. Dispon√≠vel em: <URL>. Acesso em: 18 jul. 2025."
  ]
}`;
      prompt = `INSTRU√á√ïES IMPORTANTES:
- O tema "${formData.tema}" deve ser o FOCO CENTRAL de todas as se√ß√µes do plano.
- O tempo total da aula deve ser respeitado: ${formData.duracao || '50 minutos'} minutos.  
  > Exemplo: 50 min (1 aula), 100 min (2 aulas). Distribua esse tempo nas etapas: Introdu√ß√£o, Desenvolvimento, Pr√°tica e Fechamento.
- Os **objetivos devem ser exatamente 3**, claros e diretamente relacionados ao tema.
- As **habilidades da BNCC devem variar de 1 a 5**, com c√≥digos e descri√ß√µes reais e compat√≠veis com o tema e disciplina.
- Utilize **metodologias ativas e participativas**, apropriadas √† faixa et√°ria e ao conte√∫do.
- As **refer√™ncias** devem estar no formato **ABNT**, podendo ser:
  - **Livros impressos** (autor, t√≠tulo, edi√ß√£o, local, editora, ano)
  - **Sites** (autor, t√≠tulo, nome do site, ano, link, data de acesso)
- Responda apenas com um JSON v√°lido. Nenhum texto fora do JSON.

### ‚úÖ Estrutura obrigat√≥ria do JSON:

{
  "titulo": "T√≠tulo espec√≠fico e claro sobre ${formData.tema}",
  "professor": "${formData.professor || 'Professor(a)'}",
  "data": "${formData.data || new Date().toLocaleDateString('pt-BR')}",
  "disciplina": "${formData.disciplina}",
  "serie": "${formData.serie}",
  "tema": "${formData.tema}",
  "duracao": "${formData.duracao || '50 minutos'}",
  "bncc": [
    "C√≥digo e descri√ß√£o da habilidade da BNCC relacionada ao tema"
  ],
  "objetivos": [
    "Objetivo 1 espec√≠fico sobre o tema",
    "Objetivo 2 espec√≠fico sobre o tema",
    "Objetivo 3 espec√≠fico sobre o tema"
  ],
  "habilidades": [
    {
      "codigo espec√≠fico sobre o tema": "EFxxLPxx",
      "descricao": "Descri√ß√£o do c√≥digo da habilidade relacionada ao tema"
    }
    // at√© 5 itens neste array
  ],
  "conteudosProgramaticos": [
    "Conte√∫do program√°tico 1 sobre ${formData.tema}",
    "Conte√∫do program√°tico 2 sobre ${formData.tema}"
  ],
  "desenvolvimento": [
    {
      "etapa": "Introdu√ß√£o",
      "tempo": "xx minutos",
      "atividade": "Atividade inicial sobre o tema",
      "recursos": "Recursos para introdu√ß√£o"
    },
    {
      "etapa": "Desenvolvimento",
      "tempo": "xx minutos",
      "atividade": "Atividade principal sobre o tema",
      "recursos": "Recursos principais"
    },
    {
      "etapa": "Pr√°tica",
      "tempo": "xx minutos",
      "atividade": "Atividade pr√°tica",
      "recursos": "Materiais pr√°ticos"
    },
    {
      "etapa": "Fechamento",
      "tempo": "xx minutos",
      "atividade": "Revis√£o e encerramento",
      "recursos": "Recursos de fechamento"
    }
  ],
  "recursos": [
    "Recurso 1 relacionado ao tema",
    "Recurso 2 relacionado ao tema"
  ],
  "metodologia": "Descrever metodologia ativa aplicada ao tema",
  "avaliacao": "Crit√©rios de avalia√ß√£o da aprendizagem sobre o tema",
  "referencias": [
    "SOBRENOME, Nome. T√≠tulo da obra. Edi√ß√£o. Local: Editora, ano.",
    "SOBRENOME, Nome. T√≠tulo da p√°gina. Nome do site, ano. Dispon√≠vel em: <URL>. Acesso em: 18 jul. 2025."
  ]
}`;
      console.log('üìù [PROMPT] Prompt e systemMessage para PLANO DE AULA prontos.');

    } else if (materialType === 'atividade') {
      systemMessage = `Voc√™ √© um especialista em cria√ß√£o de atividades educacionais sobre "${temaEspecifico}".
Retorne APENAS um JSON v√°lido com a estrutura especificada.`;

      prompt = `Crie uma atividade ESPEC√çFICA sobre "${temaEspecifico}" para ${disciplina}, ${serie}.
N√∫mero de quest√µes: ${formData.numeroQuestoes || formData.quantidadeQuestoes || 5}

ESTRUTURA OBRIGAT√ìRIA:
{
  "titulo": "Atividade: ${temaEspecifico}",
  "instrucoes": "Instru√ß√µes para atividade sobre ${temaEspecifico}",
  "questoes": [
    {
      "numero": 1,
      "tipo": "m√∫ltipla escolha",
      "pergunta": "Pergunta sobre ${temaEspecifico}",
      "opcoes": ["op√ß√£o sobre ${temaEspecifico}"]
    }
  ]
}`;
      console.log('üìù [PROMPT] Prompt e systemMessage para ATIVIDADE prontos.');

    } else if (materialType === 'avaliacao') {
      systemMessage = `Voc√™ √© um especialista em avalia√ß√µes educacionais sobre "${temaEspecifico}".
Retorne APENAS um JSON v√°lido com a estrutura especificada.`;

      prompt = `Crie uma avalia√ß√£o ESPEC√çFICA sobre "${temaEspecifico}" para ${disciplina}, ${serie}.
N√∫mero de quest√µes: ${formData.numeroQuestoes || formData.quantidadeQuestoes || 10}

ESTRUTURA OBRIGAT√ìRIA:
{
  "titulo": "Avalia√ß√£o: ${temaEspecifico}",
  "instrucoes": "Instru√ß√µes para avalia√ß√£o sobre ${temaEspecifico}", 
  "tempoLimite": "60 minutos",
  "questoes": [
    {
      "numero": 1,
      "tipo": "m√∫ltipla escolha",
      "pergunta": "Pergunta sobre ${temaEspecifico}",
      "opcoes": ["op√ß√£o sobre ${temaEspecifico}"],
      "pontuacao": 2
    }
  ]
}`;
      console.log('üìù [PROMPT] Prompt e systemMessage para AVALIA√á√ÉO prontos.');

    } else if (materialType === 'apoio') {
      systemMessage = `Voc√™ √© um especialista em materiais de apoio sobre "${temaEspecifico}".
Retorne APENAS um JSON v√°lido com a estrutura especificada.`;

      prompt = `Crie um material de apoio ESPEC√çFICO sobre "${temaEspecifico}" para ${disciplina}, ${serie}.

ESTRUTURA OBRIGAT√ìRIA:
{
  "titulo": "Material de Apoio: ${temaEspecifico}",
  "conteudo": "Conte√∫do HTML detalhado espec√≠fico sobre ${temaEspecifico}"
}`;
      console.log('üìù [PROMPT] Prompt e systemMessage para MATERIAL DE APOIO prontos.');
    }

    // ETAPA 2: GERAR TEXTO COM OPENAI
    console.log('ü§ñ [OPENAI] Chamando OpenAI para gera√ß√£o do conte√∫do...');
    console.log('ü§ñ [OPENAI] Enviando prompt para o tema:', temaEspecifico);

    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openAIApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4o-mini',
        messages: [
          { role: 'system', content: systemMessage },
          { role: 'user', content: prompt }
        ],
        temperature: 0.1,
        max_tokens: 4000,
      }),
    });

    if (!response.ok) {
      const errorData = await response.text();
      console.error('‚ùå [OPENAI] Erro na API:', errorData);
      throw new Error(`OpenAI API error: ${response.status} ${errorData}`);
    }

    const data = await response.json();
    console.log('‚úÖ [OPENAI] Resposta recebida da OpenAI com sucesso.');

    if (!data.choices || !data.choices[0] || !data.choices[0].message) {
      console.error('‚ùå [OPENAI] Estrutura de resposta inv√°lida:', data);
      throw new Error('Invalid response structure from OpenAI');
    }

    let generatedContent = data.choices[0].message.content.trim();
    console.log('üìù [CONTE√öDO] Preview do conte√∫do gerado:', generatedContent.substring(0, 200) + '...');

    // ETAPA 3: PROCESSAR E VALIDAR JSON
    console.log('üîç [PARSE] Realizando parse do JSON gerado...');

    generatedContent = generatedContent.replace(/```json\s*/g, '').replace(/```\s*/g, '');
    
    let parsedContent;
    try {
      parsedContent = JSON.parse(generatedContent);
      console.log('‚úÖ [PARSE] Parse do JSON realizado com sucesso.');
      
      // Removido: Valida√ß√£o do tema para slides
      // if (materialType === 'slides') {
      //   const temaPresente = parsedContent.tema && (
      //     parsedContent.tema.toLowerCase().includes(temaEspecifico.toLowerCase()) ||
      //     parsedContent.conceitos.toLowerCase().includes(temaEspecifico.toLowerCase()) ||
      //     parsedContent.introducao.toLowerCase().includes(temaEspecifico.toLowerCase())
      //   );
      //   if (!temaPresente) {
      //     console.error('‚ùå [VALIDA√á√ÉO] Conte√∫do n√£o cont√©m o tema solicitado:', temaEspecifico);
      //     console.error('‚ùå [VALIDA√á√ÉO] T√≠tulo:', parsedContent.tema);
      //     console.error('‚ùå [VALIDA√á√ÉO] Conceitos:', parsedContent.conceitos);
      //     throw new Error(`Conte√∫do gerado n√£o √© espec√≠fico para o tema: ${temaEspecifico}`);
      //   }
      //   console.log('‚úÖ [VALIDA√á√ÉO] Conte√∫do validado para o tema:', temaEspecifico);
      // }
      
    } catch (parseError) {
      console.error('‚ùå [PARSE] Falha ao fazer parse do JSON:', parseError);
      console.error('‚ùå [PARSE] Conte√∫do raw:', generatedContent);
      throw new Error('Generated content is not valid JSON');
    }

    // ETAPA 4: GERA√á√ÉO SEQUENCIAL DE IMAGENS (APENAS PARA SLIDES)
    if (materialType === 'slides') {
      console.log('üé® [IMAGENS] Iniciando gera√ß√£o sequencial de imagens para SLIDES...');
      
      const imageFields = [
        { field: 'tema_imagem', promptField: 'tema_imagem_prompt', type: 'CAPA' },
        { field: 'introducao_imagem', promptField: 'introducao_imagem_prompt', type: 'INTRODU√á√ÉO' },
        { field: 'conceitos_imagem', promptField: 'conceitos_imagem_prompt', type: 'CONCEITOS' },
        { field: 'desenvolvimento_1_imagem', promptField: 'desenvolvimento_1_imagem_prompt', type: 'DESENVOLVIMENTO-1' },
        { field: 'desenvolvimento_2_imagem', promptField: 'desenvolvimento_2_imagem_prompt', type: 'DESENVOLVIMENTO-2' },
        { field: 'desenvolvimento_3_imagem', promptField: 'desenvolvimento_3_imagem_prompt', type: 'DESENVOLVIMENTO-3' },
        { field: 'desenvolvimento_4_imagem', promptField: 'desenvolvimento_4_imagem_prompt', type: 'DESENVOLVIMENTO-4' },
        { field: 'exemplo_imagem', promptField: 'exemplo_imagem_prompt', type: 'EXEMPLO' }
      ];

      console.log(`üîÑ [SEQU√äNCIA] Total de ${imageFields.length} imagens para gerar`);

      for (let i = 0; i < imageFields.length; i++) {
        const { field, promptField, type } = imageFields[i];
        
        if (parsedContent[promptField]) {
          console.log(`üñºÔ∏è [${i + 1}/${imageFields.length}] Processando imagem: ${type}`);
          console.log(`üìù [PROMPT-${type}] Prompt:`, parsedContent[promptField]);
          
          try {
            const imageUrl = await generateImage(parsedContent[promptField], type);
            parsedContent[field] = imageUrl;
            
            // Remover o campo de prompt para n√£o incluir no resultado final
            delete parsedContent[promptField];
            
            console.log(`‚úÖ [${i + 1}/${imageFields.length}] Imagem ${type} gerada com sucesso`);
            
            // Pequena pausa entre gera√ß√µes para evitar sobrecarga
            if (i < imageFields.length - 1) {
              console.log(`‚è≥ [PAUSA] Aguardando 1 segundo antes da pr√≥xima imagem...`);
              await new Promise(resolve => setTimeout(resolve, 1000));
            }
            
          } catch (error) {
            console.error(`‚ùå [${i + 1}/${imageFields.length}] Erro na imagem ${type}:`, error);
            throw new Error(`Falha na gera√ß√£o de imagem para ${type}: ${error.message}`);
          }
        } else {
          console.warn(`‚ö†Ô∏è [${i + 1}/${imageFields.length}] Prompt n√£o encontrado para ${type}`);
        }
      }

      console.log('‚úÖ [IMAGENS] Todas as imagens para SLIDES foram processadas com sucesso.');

      // Validar campos obrigat√≥rios para slides
      const requiredFields = [
        'tema', 'disciplina', 'serie', 'professor', 'objetivos', 'introducao', 
        'conceitos', 'desenvolvimento_1', 'desenvolvimento_2', 'desenvolvimento_3', 
        'desenvolvimento_4', 'exemplo', 'atividade', 'resumo', 'conclusao',
        'tema_imagem', 'introducao_imagem', 'conceitos_imagem', 
        'desenvolvimento_1_imagem', 'desenvolvimento_2_imagem', 
        'desenvolvimento_3_imagem', 'desenvolvimento_4_imagem', 'exemplo_imagem'
      ];

      for (const field of requiredFields) {
        if (!parsedContent[field]) {
          console.error(`‚ùå [VALIDA√á√ÉO-FINAL] Campo obrigat√≥rio ausente: ${field}`);
          throw new Error(`Missing required field: ${field}`);
        }
      }
      console.log('‚úÖ [VALIDA√á√ÉO-FINAL] Todos os campos obrigat√≥rios presentes');
    }

    // ETAPA 5: FINALIZA√á√ÉO E LOGS FINAIS
    console.log('üèÅ [FINALIZA√á√ÉO] Material gerado e processado com sucesso!');
    console.log('üèÅ [FINALIZA√á√ÉO] Tipo:', materialType, '| Tema:', temaEspecifico, '| Disciplina:', disciplina, '| S√©rie:', serie);

    return new Response(JSON.stringify({ 
      success: true, 
      content: parsedContent 
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });

  } catch (error) {
    console.error('‚ùå [ERRO-GERAL] Falha na gera√ß√£o do material:', error);
    return new Response(JSON.stringify({ 
      success: false, 
      error: error.message 
    }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});
