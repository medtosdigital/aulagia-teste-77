import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2.7.1'
import { v4 as uuidv4 } from "https://deno.land/std@0.170.0/uuid/mod.ts";

const openAIApiKey = Deno.env.get('OPENAI_API_KEY');
const supabaseUrl = Deno.env.get('SUPABASE_URL')!;
const supabaseServiceKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!;

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

// Fun√ß√£o para gerar imagem via edge function gerarImagemIA
async function generateImage(prompt: string, imageType: string): Promise<string> {
  try {
    console.log(`üé® [IMAGEM-${imageType.toUpperCase()}] Iniciando gera√ß√£o com prompt:`, prompt);
    
    const response = await fetch(`${supabaseUrl}/functions/v1/gerarImagemIA`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${supabaseServiceKey}`,
      },
      body: JSON.stringify({ prompt: prompt }),
    });

    if (!response.ok) {
      console.error(`‚ùå [IMAGEM-${imageType.toUpperCase()}] Erro HTTP:`, response.status, response.statusText);
      throw new Error(`Falha na gera√ß√£o de imagem ${imageType}: HTTP ${response.status}`);
    }

    const result = await response.json();
    if (result.success && result.imageUrl) {
      console.log(`‚úÖ [IMAGEM-${imageType.toUpperCase()}] Gera√ß√£o conclu√≠da com sucesso`);
      return result.imageUrl;
    } else {
      console.error(`‚ùå [IMAGEM-${imageType.toUpperCase()}] Falha na resposta:`, result.error);
      throw new Error(`Erro na gera√ß√£o de ${imageType}: ${result.error}`);
    }
  } catch (error) {
    console.error(`‚ùå [IMAGEM-${imageType.toUpperCase()}] Erro durante gera√ß√£o:`, error);
    throw error;
  }
}

// Fun√ß√£o para validar rigorosamente o conte√∫do gerado
function validateSlidesContent(content: any, expectedTopic: string): boolean {
  console.log('üîç [VALIDA√á√ÉO] Iniciando valida√ß√£o rigorosa do conte√∫do...');
  
  const requiredFields = [
    'tema', 'disciplina', 'serie', 'professor', 'objetivos', 'introducao', 
    'conceitos', 'desenvolvimento_1', 'desenvolvimento_2', 'desenvolvimento_3', 
    'desenvolvimento_4', 'exemplo', 'atividade', 'resumo', 'conclusao'
  ];

  // Verificar se todos os campos obrigat√≥rios existem
  for (const field of requiredFields) {
    if (!content[field] || content[field].toString().trim() === '') {
      console.error(`‚ùå [VALIDA√á√ÉO] Campo obrigat√≥rio ausente ou vazio: ${field}`);
      return false;
    }
  }

  // Verificar se o tema est√° presente em m√∫ltiplos campos (valida√ß√£o rigorosa)
  const topicLower = expectedTopic.toLowerCase();
  const fieldsToCheck = ['tema', 'introducao', 'conceitos', 'desenvolvimento_1'];
  
  let topicMatchCount = 0;
  for (const field of fieldsToCheck) {
    if (content[field] && content[field].toString().toLowerCase().includes(topicLower)) {
      topicMatchCount++;
    }
  }

  if (topicMatchCount < 2) {
    console.error(`‚ùå [VALIDA√á√ÉO] Tema "${expectedTopic}" n√£o encontrado suficientemente no conte√∫do. Matches: ${topicMatchCount}`);
    console.error(`‚ùå [VALIDA√á√ÉO] Conte√∫do tema:`, content.tema);
    console.error(`‚ùå [VALIDA√á√ÉO] Conte√∫do introdu√ß√£o:`, content.introducao?.substring(0, 100));
    return false;
  }

  console.log(`‚úÖ [VALIDA√á√ÉO] Conte√∫do validado com sucesso. Tema encontrado ${topicMatchCount} vezes`);
  return true;
}

serve(async (req) => {
  const requestId = `req-${Date.now()}-${Math.floor(Math.random() * 100000)}`;
  const startTime = new Date().toISOString();
  console.log(`[MATERIAL-LOG] [${startTime}] [${requestId}] INICIO | Tipo: gerarMaterialIA`);

  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { materialType, formData } = await req.json();
    
    // GARANTIR que sempre usamos o tema correto do formData
    const temaOriginal = formData.tema || formData.topic || '';
    console.log(`[MATERIAL-LOG] [${requestId}] RECEBIDO | Tipo: ${materialType} | Tema: "${temaOriginal}"`);
    console.log('üü¢ [IN√çCIO] Requisi√ß√£o recebida para gera√ß√£o de material.');
    console.log(`üì• [DADOS] Tipo de material: ${materialType}`);
    console.log(`üì• [DADOS] Tema ORIGINAL (ser√° mantido): "${temaOriginal}"`);
    console.log(`üì• [DADOS] Disciplina: ${formData.disciplina || formData.subject || ''}`);
    console.log(`üì• [DADOS] S√©rie: ${formData.serie || formData.grade || ''}`);

    if (!openAIApiKey) {
      console.error('‚ùå [ERRO] OpenAI API key n√£o configurada');
      throw new Error('OpenAI API key not configured');
    }

    // Validar tema
    if (!temaOriginal.trim()) {
      throw new Error('Tema n√£o fornecido no formData');
    }

    // Extrair informa√ß√µes espec√≠ficas
    const disciplina = formData.disciplina || formData.subject || '';
    const serie = formData.serie || formData.grade || '';

    console.log('üéØ [TEMA] Tema que ser√° usado SEMPRE:', temaOriginal);
    console.log('üìö [DISCIPLINA] Disciplina:', disciplina);
    console.log('üéì [S√âRIE] S√©rie:', serie);

    let prompt = '';
    let systemMessage = '';

    // ETAPA 1: DEFINIR PROMPTS ULTRA-ESPEC√çFICOS PARA GERA√á√ÉO DE TEXTO
    console.log('üìù [ETAPA-1] Configurando prompts ultra-espec√≠ficos para gera√ß√£o de texto...');

    if (materialType === 'slides') {
      systemMessage = `Voc√™ √© um especialista em cria√ß√£o de materiais educacionais ULTRA-ESPEC√çFICOS para apresenta√ß√µes de slides sobre "${temaOriginal}".

REGRAS CR√çTICAS E OBRIGAT√ìRIAS:
1. TODO o conte√∫do DEVE ser EXCLUSIVAMENTE sobre "${temaOriginal}" - NUNCA sobre outros temas
2. JAMAIS mencione qualquer tema diferente de "${temaOriginal}"
3. TODAS as vari√°veis devem conter informa√ß√µes SOMENTE sobre "${temaOriginal}"
4. O campo 'tema' do JSON gerado deve ser EXATAMENTE: "${temaOriginal}" (c√≥pia literal, sem altera√ß√µes)
5. N√ÉO reescreva, N√ÉO resuma, N√ÉO adicione palavras ao tema
6. Cada campo do JSON deve ter conte√∫do educativo espec√≠fico e detalhado sobre "${temaOriginal}"

ESTRUTURA JSON RIGOROSAMENTE OBRIGAT√ìRIA:
{
  "tema": "${temaOriginal}",
  "disciplina": "${disciplina}",
  "serie": "${serie}",
  "professor": "${formData.professor || 'Professor(a)'}",
  "objetivos": ["objetivo espec√≠fico sobre ${temaOriginal}", "segundo objetivo sobre ${temaOriginal}", "terceiro objetivo sobre ${temaOriginal}"],
  "introducao": "Introdu√ß√£o detalhada e espec√≠fica sobre ${temaOriginal}",
  "conceitos": "Conceitos fundamentais e espec√≠ficos de ${temaOriginal}",
  "desenvolvimento_1": "Primeiro aspecto importante de ${temaOriginal}",
  "desenvolvimento_2": "Segundo aspecto importante de ${temaOriginal}",
  "desenvolvimento_3": "Terceiro aspecto importante de ${temaOriginal}",
  "desenvolvimento_4": "Quarto aspecto importante de ${temaOriginal}",
  "exemplo": "Exemplo pr√°tico e espec√≠fico de ${temaOriginal}",
  "atividade": "Atividade pedag√≥gica espec√≠fica sobre ${temaOriginal}",
  "resumo": "Resumo dos pontos principais de ${temaOriginal}",
  "conclusao": "Conclus√£o espec√≠fica sobre a import√¢ncia de ${temaOriginal}",
  "tema_imagem_prompt": "Ilustra√ß√£o educativa brasileira sobre ${temaOriginal} para ${disciplina}, s√©rie ${serie}, capa atraente",
  "introducao_imagem_prompt": "Introdu√ß√£o visual educativa sobre ${temaOriginal}, conceitos b√°sicos para ${disciplina} ${serie}",
  "conceitos_imagem_prompt": "Diagrama educativo dos conceitos principais de ${temaOriginal} para ${disciplina} ${serie}",
  "desenvolvimento_1_imagem_prompt": "Ilustra√ß√£o espec√≠fica do primeiro aspecto de ${temaOriginal} em ${disciplina} para ${serie}",
  "desenvolvimento_2_imagem_prompt": "Ilustra√ß√£o espec√≠fica do segundo aspecto de ${temaOriginal} em ${disciplina} para ${serie}",
  "desenvolvimento_3_imagem_prompt": "Ilustra√ß√£o espec√≠fica do terceiro aspecto de ${temaOriginal} em ${disciplina} para ${serie}",
  "desenvolvimento_4_imagem_prompt": "Ilustra√ß√£o espec√≠fica do quarto aspecto de ${temaOriginal} em ${disciplina} para ${serie}",
  "exemplo_imagem_prompt": "Exemplo visual pr√°tico de ${temaOriginal} aplicado em ${disciplina} para ${serie}"
}

IMPORTANTE: Retorne APENAS o JSON v√°lido, sem markdown ou explica√ß√µes.`;

      prompt = `Crie uma apresenta√ß√£o educacional ULTRA-ESPEC√çFICA e DETALHADA sobre "${temaOriginal}".

DADOS OBRIGAT√ìRIOS:
- Tema EXCLUSIVO: ${temaOriginal}
- Disciplina: ${disciplina}
- S√©rie: ${serie}
- Professor: ${formData.professor || 'Professor(a)'}

INSTRU√á√ïES CR√çTICAS PARA "${temaOriginal}":
1. TODOS os textos devem ser EXCLUSIVAMENTE sobre "${temaOriginal}"
2. NUNCA mencione outros temas al√©m de "${temaOriginal}"
3. Use linguagem adequada para ${serie} mas espec√≠fica sobre "${temaOriginal}"
4. Foque em conceitos, defini√ß√µes, exemplos e aplica√ß√µes SOMENTE de "${temaOriginal}"
5. Cada campo deve ter pelo menos 2-3 frases espec√≠ficas sobre "${temaOriginal}"
6. O campo 'tema' deve ser EXATAMENTE: "${temaOriginal}" (sem altera√ß√µes)

Retorne APENAS o JSON com conte√∫do ultra-espec√≠fico sobre "${temaOriginal}".`;

    } else if (materialType === 'plano-de-aula') {
      systemMessage = `Voc√™ √© um especialista em educa√ß√£o brasileira, pedagogo experiente e profundo conhecedor da BNCC. Crie um plano de aula DETALHADO e ESPEC√çFICO sobre o tema "${temaOriginal}" para a disciplina "${disciplina}", voltado para a s√©rie/ano "${serie}".

ATEN√á√ÉO CR√çTICA: O campo 'titulo' e o campo 'tema' DEVEM ser EXATAMENTE "${temaOriginal}" (c√≥pia literal, sem varia√ß√µes, sem sin√¥nimos, sem reescrever, sem mudar a ordem das palavras, sem adicionar nada).`;

      prompt = `INSTRU√á√ïES IMPORTANTES:
- O tema "${temaOriginal}" deve ser o FOCO CENTRAL de todas as se√ß√µes do plano.
- O tempo total da aula deve ser respeitado: ${formData.duracao || '50 minutos'} minutos.
- Os **objetivos devem ser exatamente 3**, claros e diretamente relacionados ao tema.
- As **habilidades da BNCC devem variar de 1 a 5**, com c√≥digos e descri√ß√µes reais e compat√≠veis com o tema e disciplina.
- Utilize **metodologias ativas e participativas**, apropriadas √† faixa et√°ria e ao conte√∫do.
- As **refer√™ncias** devem estar no formato **ABNT**.
- Responda apenas com um JSON v√°lido. Nenhum texto fora do JSON.
- O campo 'titulo' e o campo 'tema' DEVEM ser EXATAMENTE "${temaOriginal}" (sem altera√ß√µes).

### Estrutura obrigat√≥ria do JSON:

{
  "titulo": "${temaOriginal}",
  "professor": "${formData.professor || 'Professor(a)'}",
  "data": "${formData.data || new Date().toLocaleDateString('pt-BR')}",
  "disciplina": "${disciplina}",
  "serie": "${serie}",
  "tema": "${temaOriginal}",
  "duracao": "${formData.duracao || '50 minutos'}",
  "bncc": ["C√≥digo e descri√ß√£o da habilidade da BNCC relacionada ao tema"],
  "objetivos": ["Objetivo 1 espec√≠fico sobre o tema", "Objetivo 2 espec√≠fico sobre o tema", "Objetivo 3 espec√≠fico sobre o tema"],
  "habilidades": [{"codigo espec√≠fico sobre o tema": "EFxxLPxx", "descricao": "Descri√ß√£o do c√≥digo da habilidade relacionada ao tema"}],
  "conteudosProgramaticos": ["Conte√∫do program√°tico 1 sobre ${temaOriginal}", "Conte√∫do program√°tico 2 sobre ${temaOriginal}"],
  "desenvolvimento": [
    {"etapa": "Introdu√ß√£o", "tempo": "xx minutos", "atividade": "Atividade inicial sobre o tema", "recursos": "Recursos para introdu√ß√£o"},
    {"etapa": "Desenvolvimento", "tempo": "xx minutos", "atividade": "Atividade principal sobre o tema", "recursos": "Recursos principais"},
    {"etapa": "Pr√°tica", "tempo": "xx minutos", "atividade": "Atividade pr√°tica", "recursos": "Materiais pr√°ticos"},
    {"etapa": "Fechamento", "tempo": "xx minutos", "atividade": "Revis√£o e encerramento", "recursos": "Recursos de fechamento"}
  ],
  "recursos": ["Recurso 1 relacionado ao tema", "Recurso 2 relacionado ao tema"],
  "metodologia": "Descrever metodologia ativa aplicada ao tema",
  "avaliacao": "Crit√©rios de avalia√ß√£o da aprendizagem sobre o tema",
  "referencias": ["SOBRENOME, Nome. T√≠tulo da obra. Edi√ß√£o. Local: Editora, ano.", "SOBRENOME, Nome. T√≠tulo da p√°gina. Nome do site, ano. Dispon√≠vel em: <URL>. Acesso em: 18 jul. 2025."]
}`;

    } else if (materialType === 'atividade') {
      systemMessage = `Voc√™ √© um especialista em cria√ß√£o de atividades educacionais sobre "${temaOriginal}".
O campo 'tema' do JSON gerado deve ser EXATAMENTE: "${temaOriginal}". N√£o reescreva, n√£o resuma, n√£o adicione palavras, apenas copie exatamente o texto do tema enviado.
Retorne APENAS um JSON v√°lido com a estrutura especificada.`;

      prompt = `Crie uma atividade ESPEC√çFICA sobre "${temaOriginal}" para ${disciplina}, ${serie}.
N√∫mero de quest√µes: ${formData.numeroQuestoes || formData.quantidadeQuestoes || 5}

ESTRUTURA OBRIGAT√ìRIA:
{
  "titulo": "Atividade: ${temaOriginal}",
  "tema": "${temaOriginal}",
  "instrucoes": "Instru√ß√µes para atividade sobre ${temaOriginal}",
  "questoes": [{"numero": 1, "tipo": "m√∫ltipla escolha", "pergunta": "Pergunta sobre ${temaOriginal}", "opcoes": ["op√ß√£o sobre ${temaOriginal}"]}]
}`;

    } else if (materialType === 'avaliacao') {
      systemMessage = `Voc√™ √© um especialista em avalia√ß√µes educacionais sobre "${temaOriginal}".
O campo 'tema' do JSON gerado deve ser EXATAMENTE: "${temaOriginal}". N√£o reescreva, n√£o resuma, n√£o adicione palavras, apenas copie exatamente o texto do tema enviado.
Retorne APENAS um JSON v√°lido com a estrutura especificada.`;

      prompt = `Crie uma avalia√ß√£o ESPEC√çFICA sobre "${temaOriginal}" para ${disciplina}, ${serie}.
N√∫mero de quest√µes: ${formData.numeroQuestoes || formData.quantidadeQuestoes || 10}

ESTRUTURA OBRIGAT√ìRIA:
{
  "titulo": "Avalia√ß√£o: ${temaOriginal}",
  "tema": "${temaOriginal}",
  "instrucoes": "Instru√ß√µes para avalia√ß√£o sobre ${temaOriginal}",
  "tempoLimite": "60 minutos",
  "questoes": [{"numero": 1, "tipo": "m√∫ltipla escolha", "pergunta": "Pergunta sobre ${temaOriginal}", "opcoes": ["op√ß√£o sobre ${temaOriginal}"], "pontuacao": 2}]
}`;

    } else if (materialType === 'apoio') {
      systemMessage = `Voc√™ √© um especialista em materiais de apoio educacionais sobre "${temaOriginal}".
O campo 'tema' do JSON gerado deve ser EXATAMENTE: "${temaOriginal}". N√£o reescreva, n√£o resuma, n√£o adicione palavras, apenas copie exatamente o texto do tema enviado.
Retorne APENAS um JSON v√°lido com a estrutura especificada.`;

      prompt = `Crie um material de apoio ESPEC√çFICO sobre "${temaOriginal}" para ${disciplina}, ${serie}.

ESTRUTURA OBRIGAT√ìRIA:
{
  "titulo": "Material de Apoio: ${temaOriginal}",
  "tema": "${temaOriginal}",
  "conteudo": "Conte√∫do HTML detalhado espec√≠fico sobre ${temaOriginal}"
}`;
    }

    // ETAPA 2: GERAR TEXTO COM OPENAI COM VALIDA√á√ÉO RIGOROSA
    console.log('ü§ñ [ETAPA-2] Chamando OpenAI para gera√ß√£o de texto ultra-espec√≠fico...');
    console.log('üì§ [OPENAI] Enviando prompt ultra-espec√≠fico para tema:', temaOriginal);

    let attempts = 0;
    let parsedContent = null;
    const maxAttempts = 3;

    while (attempts < maxAttempts && !parsedContent) {
      attempts++;
      console.log(`üîÑ [TENTATIVA-${attempts}] Gerando conte√∫do para "${temaOriginal}"...`);

      const response = await fetch('https://api.openai.com/v1/chat/completions', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${openAIApiKey}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          model: 'gpt-4o-mini',
          messages: [
            { role: 'system', content: systemMessage },
            { role: 'user', content: prompt }
          ],
          temperature: 0.1,
          max_tokens: 4000,
        }),
      });

      if (!response.ok) {
        const errorData = await response.text();
        console.error('‚ùå [OPENAI] Erro na API:', errorData);
        throw new Error(`OpenAI API error: ${response.status} ${errorData}`);
      }

      const data = await response.json();
      console.log(`‚úÖ [OPENAI] Resposta recebida para tentativa ${attempts}`);

      if (!data.choices || !data.choices[0] || !data.choices[0].message) {
        console.error('‚ùå [OPENAI] Estrutura de resposta inv√°lida:', data);
        continue;
      }

      let generatedContent = data.choices[0].message.content.trim();
      console.log('üìù [CONTE√öDO] Preview do conte√∫do gerado:', generatedContent.substring(0, 200) + '...');

      // ETAPA 3: PROCESSAR E VALIDAR JSON RIGOROSAMENTE
      console.log(`üîç [ETAPA-3] Processando e validando JSON (tentativa ${attempts})...`);

      generatedContent = generatedContent.replace(/```json\s*/g, '').replace(/```\s*/g, '');
      
      try {
        const tempParsedContent = JSON.parse(generatedContent);
        console.log(`‚úÖ [JSON] Parse realizado com sucesso na tentativa ${attempts}`);
        
        // VALIDA√á√ÉO CR√çTICA: SEMPRE for√ßar o tema original
        if (tempParsedContent && typeof tempParsedContent === 'object') {
          console.log(`üîß [CORRE√á√ÉO] Tema gerado pela IA: "${tempParsedContent.tema}"`);
          console.log(`üîß [CORRE√á√ÉO] For√ßando tema original: "${temaOriginal}"`);
          
          // SOBRESCREVER SEMPRE o tema com o original
          tempParsedContent.tema = temaOriginal;
          tempParsedContent.titulo = temaOriginal;
          
          console.log(`‚úÖ [CORRE√á√ÉO] Tema corrigido para: "${tempParsedContent.tema}"`);
        }
        
        // Valida√ß√£o ultra-rigorosa para slides
        if (materialType === 'slides') {
          if (validateSlidesContent(tempParsedContent, temaOriginal)) {
            parsedContent = tempParsedContent;
            console.log(`‚úÖ [VALIDA√á√ÉO] Conte√∫do aprovado na tentativa ${attempts} para tema: ${temaOriginal}`);
            break;
          } else {
            console.warn(`‚ö†Ô∏è [VALIDA√á√ÉO] Tentativa ${attempts} rejeitada. Conte√∫do n√£o espec√≠fico para: ${temaOriginal}`);
            if (attempts < maxAttempts) {
              console.log(`üîÑ [RETRY] Tentando novamente... (${attempts + 1}/${maxAttempts})`);
              continue;
            }
          }
        } else {
          // Para outros tipos de material, usar valida√ß√£o mais simples
          parsedContent = tempParsedContent;
          break;
        }
        
      } catch (parseError) {
        console.error(`‚ùå [JSON] Falha no parse da tentativa ${attempts}:`, parseError);
        if (attempts < maxAttempts) {
          console.log(`üîÑ [RETRY] Tentando novamente devido a erro de parse... (${attempts + 1}/${maxAttempts})`);
          continue;
        }
      }
    }

    if (!parsedContent) {
      console.error('‚ùå [CR√çTICO] Falha em todas as tentativas de gera√ß√£o de conte√∫do espec√≠fico');
      throw new Error(`N√£o foi poss√≠vel gerar conte√∫do espec√≠fico para "${temaOriginal}" ap√≥s ${maxAttempts} tentativas`);
    }

    // ETAPA 4: GERA√á√ÉO SEQUENCIAL DE IMAGENS (APENAS PARA SLIDES)
    if (materialType === 'slides') {
      console.log('üé® [IMAGENS] Iniciando gera√ß√£o sequencial de imagens para SLIDES...');
      
      const imageFields = [
        { field: 'tema_imagem', promptField: 'tema_imagem_prompt', type: 'CAPA' },
        { field: 'introducao_imagem', promptField: 'introducao_imagem_prompt', type: 'INTRODU√á√ÉO' },
        { field: 'conceitos_imagem', promptField: 'conceitos_imagem_prompt', type: 'CONCEITOS' },
        { field: 'desenvolvimento_1_imagem', promptField: 'desenvolvimento_1_imagem_prompt', type: 'DESENVOLVIMENTO-1' },
        { field: 'desenvolvimento_2_imagem', promptField: 'desenvolvimento_2_imagem_prompt', type: 'DESENVOLVIMENTO-2' },
        { field: 'desenvolvimento_3_imagem', promptField: 'desenvolvimento_3_imagem_prompt', type: 'DESENVOLVIMENTO-3' },
        { field: 'desenvolvimento_4_imagem', promptField: 'desenvolvimento_4_imagem_prompt', type: 'DESENVOLVIMENTO-4' },
        { field: 'exemplo_imagem', promptField: 'exemplo_imagem_prompt', type: 'EXEMPLO' }
      ];

      console.log(`üîÑ [SEQU√äNCIA] Total de ${imageFields.length} imagens para gerar`);

      for (let i = 0; i < imageFields.length; i++) {
        const { field, promptField, type } = imageFields[i];
        
        if (parsedContent[promptField]) {
          console.log(`üñºÔ∏è [${i + 1}/${imageFields.length}] Processando imagem: ${type}`);
          console.log(`üìù [PROMPT-${type}] Prompt:`, parsedContent[promptField]);
          
          try {
            const imageUrl = await generateImage(parsedContent[promptField], type);
            parsedContent[field] = imageUrl;
            
            // Remover o campo de prompt para n√£o incluir no resultado final
            delete parsedContent[promptField];
            
            console.log(`‚úÖ [${i + 1}/${imageFields.length}] Imagem ${type} gerada com sucesso`);
            
            // Pequena pausa entre gera√ß√µes para evitar sobrecarga
            if (i < imageFields.length - 1) {
              console.log(`‚è≥ [PAUSA] Aguardando 1 segundo antes da pr√≥xima imagem...`);
              await new Promise(resolve => setTimeout(resolve, 1000));
            }
            
          } catch (error) {
            console.error(`‚ùå [${i + 1}/${imageFields.length}] Erro na imagem ${type}:`, error);
            throw new Error(`Falha na gera√ß√£o de imagem para ${type}: ${error.message}`);
          }
        } else {
          console.warn(`‚ö†Ô∏è [${i + 1}/${imageFields.length}] Prompt n√£o encontrado para ${type}`);
        }
      }

      console.log('‚úÖ [IMAGENS] Todas as imagens para SLIDES foram processadas com sucesso.');

      // Validar campos obrigat√≥rios para slides
      const requiredFields = [
        'tema', 'disciplina', 'serie', 'professor', 'objetivos', 'introducao', 
        'conceitos', 'desenvolvimento_1', 'desenvolvimento_2', 'desenvolvimento_3', 
        'desenvolvimento_4', 'exemplo', 'atividade', 'resumo', 'conclusao',
        'tema_imagem', 'introducao_imagem', 'conceitos_imagem', 
        'desenvolvimento_1_imagem', 'desenvolvimento_2_imagem', 
        'desenvolvimento_3_imagem', 'desenvolvimento_4_imagem', 'exemplo_imagem'
      ];

      for (const field of requiredFields) {
        if (!parsedContent[field]) {
          console.error(`‚ùå [VALIDA√á√ÉO-FINAL] Campo obrigat√≥rio ausente: ${field}`);
          throw new Error(`Missing required field: ${field}`);
        }
      }
      console.log('‚úÖ [VALIDA√á√ÉO-FINAL] Todos os campos obrigat√≥rios presentes');
    }

    // ETAPA 5: FINALIZA√á√ÉO E LOGS FINAIS
    console.log('üèÅ [ETAPA-5] Finalizando gera√ß√£o do material...');
    console.log(`[MATERIAL-LOG] [${requestId}] TEMA_FINAL | Tema que ser√° salvo: "${parsedContent.tema}"`);
    console.log(`[MATERIAL-LOG] [${requestId}] PRONTO_PARA_SALVAR | Tipo: ${materialType} | Tema: "${parsedContent.tema}"`);
    console.log('‚úÖ [SUCESSO] Material ultra-espec√≠fico gerado com sucesso!');

    const endTime = new Date().toISOString();
    console.log(`[MATERIAL-LOG] [${endTime}] [${requestId}] FIM | Tipo: ${materialType} | Tema: "${parsedContent.tema}"`);

    return new Response(JSON.stringify({ 
      success: true, 
      content: parsedContent,
      validation: {
        topic: temaOriginal,
        attempts: attempts,
        validated: true
      }
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });

  } catch (error) {
    const errorTime = new Date().toISOString();
    console.error(`[MATERIAL-LOG] [${errorTime}] [${requestId}] ERRO | Tipo: gerarMaterialIA | Mensagem: ${error.message}`);
    return new Response(JSON.stringify({ 
      success: false, 
      error: error.message 
    }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});
