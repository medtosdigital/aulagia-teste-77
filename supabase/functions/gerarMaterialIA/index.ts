import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2'

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders });
  }

  try {
    const { materialType, formData } = await req.json();
    
    console.log('üìã Generating material:', { materialType, formData });
    
    const openAIApiKey = Deno.env.get('OPENAI_API_KEY');
    if (!openAIApiKey) {
      throw new Error('OpenAI API key not configured');
    }

    const supabaseUrl = Deno.env.get('SUPABASE_URL')!;
    const supabaseServiceKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!;
    const supabase = createClient(supabaseUrl, supabaseServiceKey);

    let prompt = '';
    let responseStructure = '';

    if (materialType === 'exercicio') {
      prompt = `
      Voc√™ √© um assistente pedag√≥gico especializado em criar exerc√≠cios educativos envolventes e eficazes.
      
      INFORMA√á√ïES FORNECIDAS:
      - Tema: ${formData.tema}
      - Disciplina: ${formData.disciplina}
      - S√©rie/Ano: ${formData.serie}
      - Tipo de Exerc√≠cio: ${formData.tipoExercicio || 'N√£o especificado'}
      - Objetivos: ${Array.isArray(formData.objetivos) ? formData.objetivos.join(', ') : (formData.objetivos || 'N√£o especificado')}
      - Recursos: ${formData.recursos || 'N√£o especificado'}
      
      INSTRU√á√ïES ESPEC√çFICAS:
      1. Crie um exerc√≠cio educativo completo e bem estruturado.
      2. Use linguagem clara e adequada ao n√≠vel dos alunos.
      3. Inclua exemplos pr√°ticos e situa√ß√µes do cotidiano.
      4. Organize o conte√∫do de forma l√≥gica e progressiva.
      5. Mantenha o foco no tema principal.
      6. Evite linguagem muito t√©cnica ou complexa.
      7. Inclua elementos visuais quando apropriado (descri√ß√µes de imagens, diagramas, etc.).
      
      ESTRUTURA OBRIGAT√ìRIA:
      O exerc√≠cio deve conter exatamente as seguintes se√ß√µes:
      
      1. **T√≠tulo do Exerc√≠cio:** T√≠tulo claro e conciso do exerc√≠cio.
      2. **Objetivos:** Descreva os objetivos de aprendizado do exerc√≠cio.
      3. **Instru√ß√µes:** Forne√ßa instru√ß√µes detalhadas sobre como realizar o exerc√≠cio.
      4. **Materiais Necess√°rios:** Liste todos os materiais necess√°rios para realizar o exerc√≠cio.
      5. **Passos:** Descreva os passos detalhados para completar o exerc√≠cio.
      6. **Exemplo:** Forne√ßa um exemplo de como o exerc√≠cio deve ser realizado.
      7. **Avalia√ß√£o:** Explique como o exerc√≠cio ser√° avaliado.
      
      FORMATO DE RESPOSTA:
      Retorne apenas um JSON v√°lido com a seguinte estrutura:
      
      {
        "titulo": "T√≠tulo do Exerc√≠cio",
        "objetivos": ["Objetivo 1", "Objetivo 2"],
        "instrucoes": "Instru√ß√µes detalhadas",
        "materiais_necessarios": ["Material 1", "Material 2"],
        "passos": ["Passo 1", "Passo 2"],
        "exemplo": "Exemplo de como realizar o exerc√≠cio",
        "avaliacao": "Crit√©rios de avalia√ß√£o"
      }
      
      IMPORTANTE:
      - Cada se√ß√£o deve ter entre 100-200 palavras.
      - Use formata√ß√£o HTML simples quando necess√°rio (negrito, it√°lico, listas).
      - Mantenha a linguagem adequada √† faixa et√°ria.
      - Seja pr√°tico e objetivo.
      - N√£o use markdown, apenas HTML simples.
      - Retorne APENAS o JSON v√°lido, sem texto adicional.
      `;
      
      responseStructure = `
      Estrutura esperada:
      {
        "titulo": "string",
        "objetivos": ["string"],
        "instrucoes": "string",
        "materiais_necessarios": ["string"],
        "passos": ["string"],
        "exemplo": "string",
        "avaliacao": "string"
      }
      `;
    }

    if (materialType === 'apoio') {
      prompt = `
      Voc√™ √© um assistente pedag√≥gico especializado em criar materiais de apoio did√°tico para professores. 
      Sua fun√ß√£o √© gerar conte√∫do claro, pr√°tico e acess√≠vel que ajude os alunos a compreender melhor os temas apresentados em aula.

      INFORMA√á√ïES DO MATERIAL:
      - Tema: ${formData.tema}
      - Disciplina: ${formData.disciplina}
      - S√©rie/Ano: ${formData.serie}
      - T√≠tulo do Material Principal: ${formData.titulo || 'N√£o especificado'}
      - Objetivos: ${Array.isArray(formData.objetivos) ? formData.objetivos.join(', ') : (formData.objetivos || 'N√£o especificado')}

      INSTRU√á√ïES ESPEC√çFICAS:
      1. Crie um material de apoio completo e estruturado
      2. Use linguagem clara e adequada ao n√≠vel dos alunos
      3. Inclua exemplos pr√°ticos e situa√ß√µes do cotidiano
      4. Organize o conte√∫do de forma l√≥gica e progressiva
      5. Mantenha o foco no tema principal
      6. Evite linguagem muito t√©cnica ou complexa
      7. Inclua elementos visuais quando apropriado (descri√ß√µes de imagens, diagramas, etc.)

      ESTRUTURA OBRIGAT√ìRIA - O material deve conter exatamente estas 7 se√ß√µes:

      1. **Explica√ß√£o Simples do Tema** - Defini√ß√£o clara e simples do conceito principal (m√°ximo 150 palavras)
      2. **Por que √© Importante** - Relev√¢ncia do tema na vida dos alunos (m√°ximo 150 palavras)
      3. **Como Funciona** - Explica√ß√£o do processo ou funcionamento (m√°ximo 200 palavras)
      4. **Exemplos do Dia a Dia** - Situa√ß√µes reais e cotidianas (m√°ximo 200 palavras)
      5. **Dicas de Estudo** - Pontos-chave e observa√ß√µes relevantes (m√°ximo 150 palavras)
      6. **Atividades Pr√°ticas** - Exerc√≠cios simples para fixa√ß√£o (m√°ximo 200 palavras)
      7. **Curiosidades** - Informa√ß√µes interessantes e complementares (m√°ximo 150 palavras)

      FORMATO DE RESPOSTA:
      Retorne apenas um JSON v√°lido com a seguinte estrutura:

      {
        "titulo": "T√≠tulo do Material de Apoio",
        "tema_material_principal": "${formData.tema}",
        "explicacao_simples": "Conte√∫do da se√ß√£o 1",
        "por_que_importante": "Conte√∫do da se√ß√£o 2", 
        "como_funciona": "Conte√∫do da se√ß√£o 3",
        "exemplos_dia_a_dia": "Conte√∫do da se√ß√£o 4",
        "dicas_estudo": "Conte√∫do da se√ß√£o 5",
        "atividades_praticas": "Conte√∫do da se√ß√£o 6",
        "curiosidades": "Conte√∫do da se√ß√£o 7"
      }

      IMPORTANTE:
      - Cada se√ß√£o deve respeitar o limite de palavras especificado
      - Use formata√ß√£o HTML simples quando necess√°rio (negrito, it√°lico, listas)
      - Mantenha a linguagem adequada √† faixa et√°ria
      - Seja pr√°tico e objetivo
      - N√£o use markdown, apenas HTML simples
      - Retorne APENAS o JSON v√°lido, sem texto adicional
      `;

      responseStructure = `
        Estrutura esperada:
        {
          "titulo": "string",
          "tema_material_principal": "string",
          "explicacao_simples": "string",
          "por_que_importante": "string",
          "como_funciona": "string", 
          "exemplos_dia_a_dia": "string",
          "dicas_estudo": "string",
          "atividades_praticas": "string",
          "curiosidades": "string"
        }
      `;
    } else if (materialType === 'plano_aula') {
      prompt = `
      Voc√™ √© um assistente pedag√≥gico especializado em criar planos de aula detalhados e pr√°ticos para professores.
      
      INFORMA√á√ïES FORNECIDAS:
      - Tema: ${formData.tema}
      - Disciplina: ${formData.disciplina}
      - S√©rie/Ano: ${formData.serie}
      - Dura√ß√£o: ${formData.duracao || '50 minutos'}
      - Objetivos: ${Array.isArray(formData.objetivos) ? formData.objetivos.join(', ') : (formData.objetivos || 'N√£o especificado')}
      - Recursos: ${formData.recursos || 'N√£o especificado'}
      - Metodologia: ${formData.metodologia || 'N√£o especificado'}

      INSTRU√á√ïES ESPEC√çFICAS:
      1. Elabore um plano de aula completo e bem estruturado.
      2. Use linguagem clara e adequada ao n√≠vel dos alunos.
      3. Inclua exemplos pr√°ticos e situa√ß√µes do cotidiano.
      4. Organize o conte√∫do de forma l√≥gica e progressiva.
      5. Mantenha o foco no tema principal.
      6. Evite linguagem muito t√©cnica ou complexa.
      7. Inclua elementos visuais quando apropriado (descri√ß√µes de imagens, diagramas, etc.).

      ESTRUTURA OBRIGAT√ìRIA:
      O plano de aula deve conter exatamente as seguintes se√ß√µes:

      1. **T√≠tulo:** T√≠tulo claro e conciso do plano de aula.
      2. **Tema:** Tema principal da aula.
      3. **Disciplina:** Disciplina relacionada ao tema.
      4. **S√©rie/Ano:** S√©rie ou ano escolar para o qual o plano de aula √© destinado.
      5. **Dura√ß√£o:** Tempo estimado para a realiza√ß√£o da aula.
      6. **Objetivos:** Objetivos de aprendizado que os alunos devem alcan√ßar.
      7. **Recursos:** Materiais e recursos necess√°rios para a aula.
      8. **Metodologia:** Estrat√©gias e m√©todos de ensino a serem utilizados.
      9. **Desenvolvimento:**
          - **Introdu√ß√£o:** Atividades iniciais para engajar os alunos.
          - **Desenvolvimento:** Atividades principais para explorar o tema.
          - **Conclus√£o:** Atividades finais para consolidar o aprendizado.
      10. **Avalia√ß√£o:** M√©todos para avaliar o aprendizado dos alunos.
      11. **Observa√ß√µes:** Notas adicionais ou informa√ß√µes relevantes.

      FORMATO DE RESPOSTA:
      Retorne apenas um JSON v√°lido com a seguinte estrutura:

      {
        "titulo": "T√≠tulo do Plano de Aula",
        "tema": "Tema Principal",
        "disciplina": "Disciplina",
        "serie": "S√©rie/Ano",
        "duracao": "Tempo Estimado",
        "objetivos": ["Objetivo 1", "Objetivo 2"],
        "recursos": ["Recurso 1", "Recurso 2"],
        "metodologia": "Metodologia de Ensino",
        "desenvolvimento": {
          "introducao": "Atividades Iniciais",
          "desenvolvimento": "Atividades Principais",
          "conclusao": "Atividades Finais"
        },
        "avaliacao": "M√©todos de Avalia√ß√£o",
        "observacoes": "Notas Adicionais"
      }

      IMPORTANTE:
      - Cada se√ß√£o deve ter entre 100-200 palavras.
      - Use formata√ß√£o HTML simples quando necess√°rio (negrito, it√°lico, listas).
      - Mantenha a linguagem adequada √† faixa et√°ria.
      - Seja pr√°tico e objetivo.
      - N√£o use markdown, apenas HTML simples.
      - Retorne APENAS o JSON v√°lido, sem texto adicional.
      `;

      responseStructure = `
        Estrutura esperada:
        {
          "titulo": "string",
          "tema": "string",
          "disciplina": "string",
          "serie": "string",
          "duracao": "string",
          "objetivos": ["string"],
          "recursos": ["string"],
          "metodologia": "string",
          "desenvolvimento": {
            "introducao": "string",
            "desenvolvimento": "string",
            "conclusao": "string"
          },
          "avaliacao": "string",
          "observacoes": "string"
        }
      `;
    } else if (materialType === 'atividade') {
      prompt = `
      Voc√™ √© um assistente pedag√≥gico especializado em criar atividades educacionais envolventes e eficazes.
      
      INFORMA√á√ïES FORNECIDAS:
      - Tema: ${formData.tema}
      - Disciplina: ${formData.disciplina}
      - S√©rie/Ano: ${formData.serie}
      - Tipo de Atividade: ${formData.tipoAtividade || 'N√£o especificado'}
      - Objetivos: ${Array.isArray(formData.objetivos) ? formData.objetivos.join(', ') : (formData.objetivos || 'N√£o especificado')}
      - Recursos: ${formData.recursos || 'N√£o especificado'}

      INSTRU√á√ïES ESPEC√çFICAS:
      1. Elabore uma atividade educacional completa e bem estruturada.
      2. Use linguagem clara e adequada ao n√≠vel dos alunos.
      3. Inclua exemplos pr√°ticos e situa√ß√µes do cotidiano.
      4. Organize o conte√∫do de forma l√≥gica e progressiva.
      5. Mantenha o foco no tema principal.
      6. Evite linguagem muito t√©cnica ou complexa.
      7. Inclua elementos visuais quando apropriado (descri√ß√µes de imagens, diagramas, etc.).

      ESTRUTURA OBRIGAT√ìRIA:
      A atividade deve conter exatamente as seguintes se√ß√µes:

      1. **T√≠tulo:** T√≠tulo claro e conciso da atividade.
      2. **Tema:** Tema principal da atividade.
      3. **Disciplina:** Disciplina relacionada ao tema.
      4. **S√©rie/Ano:** S√©rie ou ano escolar para o qual a atividade √© destinada.
      5. **Tipo de Atividade:** Tipo de atividade (ex: jogo, experimento, discuss√£o).
      6. **Objetivos:** Objetivos de aprendizado que os alunos devem alcan√ßar.
      7. **Recursos:** Materiais e recursos necess√°rios para a atividade.
      8. **Instru√ß√µes:** Passos detalhados para realizar a atividade.
      9. **Desenvolvimento:** Descri√ß√£o detalhada de como a atividade deve ser conduzida.
      10. **Avalia√ß√£o:** M√©todos para avaliar o aprendizado dos alunos durante a atividade.
      11. **Tempo Estimado:** Tempo estimado para a realiza√ß√£o da atividade.

      FORMATO DE RESPOSTA:
      Retorne apenas um JSON v√°lido com a seguinte estrutura:

      {
        "titulo": "T√≠tulo da Atividade",
        "tema": "Tema Principal",
        "disciplina": "Disciplina",
        "serie": "S√©rie/Ano",
        "tipo_atividade": "Tipo de Atividade",
        "objetivos": ["Objetivo 1", "Objetivo 2"],
        "recursos": ["Recurso 1", "Recurso 2"],
        "instrucoes": "Instru√ß√µes Detalhadas",
        "desenvolvimento": "Descri√ß√£o Detalhada",
        "avaliacao": "M√©todos de Avalia√ß√£o",
        "tempo_estimado": "Tempo Estimado"
      }

      IMPORTANTE:
      - Cada se√ß√£o deve ter entre 100-200 palavras.
      - Use formata√ß√£o HTML simples quando necess√°rio (negrito, it√°lico, listas).
      - Mantenha a linguagem adequada √† faixa et√°ria.
      - Seja pr√°tico e objetivo.
      - N√£o use markdown, apenas HTML simples.
      - Retorne APENAS o JSON v√°lido, sem texto adicional.
      `;

      responseStructure = `
        Estrutura esperada:
        {
          "titulo": "string",
          "tema": "string",
          "disciplina": "string",
          "serie": "string",
          "tipo_atividade": "string",
          "objetivos": ["string"],
          "recursos": ["string"],
          "instrucoes": "string",
          "desenvolvimento": "string",
          "avaliacao": "string",
          "tempo_estimado": "string"
        }
      `;
    } else if (materialType === 'avaliacao') {
      prompt = `
      Voc√™ √© um assistente pedag√≥gico especializado em criar avalia√ß√µes educacionais justas e abrangentes.
      
      INFORMA√á√ïES FORNECIDAS:
      - Tema: ${formData.tema}
      - Disciplina: ${formData.disciplina}
      - S√©rie/Ano: ${formData.serie}
      - Tipo de Avalia√ß√£o: ${formData.tipoAvaliacao || 'N√£o especificado'}
      - Objetivos: ${Array.isArray(formData.objetivos) ? formData.objetivos.join(', ') : (formData.objetivos || 'N√£o especificado')}
      - N√∫mero de Quest√µes: ${formData.numeroQuestoes || '10'}

      INSTRU√á√ïES ESPEC√çFICAS:
      1. Elabore uma avalia√ß√£o educacional completa e bem estruturada.
      2. Use linguagem clara e adequada ao n√≠vel dos alunos.
      3. Inclua exemplos pr√°ticos e situa√ß√µes do cotidiano.
      4. Organize o conte√∫do de forma l√≥gica e progressiva.
      5. Mantenha o foco no tema principal.
      6. Evite linguagem muito t√©cnica ou complexa.
      7. Inclua elementos visuais quando apropriado (descri√ß√µes de imagens, diagramas, etc.).

      ESTRUTURA OBRIGAT√ìRIA:
      A avalia√ß√£o deve conter exatamente as seguintes se√ß√µes:

      1. **T√≠tulo:** T√≠tulo claro e conciso da avalia√ß√£o.
      2. **Tema:** Tema principal da avalia√ß√£o.
      3. **Disciplina:** Disciplina relacionada ao tema.
      4. **S√©rie/Ano:** S√©rie ou ano escolar para o qual a avalia√ß√£o √© destinada.
      5. **Tipo de Avalia√ß√£o:** Tipo de avalia√ß√£o (ex: prova, teste, question√°rio).
      6. **Instru√ß√µes:** Instru√ß√µes claras e concisas para os alunos.
      7. **Quest√µes:** Lista de quest√µes com enunciados claros e objetivos.
          - Cada quest√£o deve ter um n√∫mero, enunciado, tipo (ex: m√∫ltipla escolha, dissertativa) e op√ß√µes (se aplic√°vel).
      8. **Gabarito:** Respostas corretas para cada quest√£o, com justificativas (se necess√°rio).

      FORMATO DE RESPOSTA:
      Retorne apenas um JSON v√°lido com a seguinte estrutura:

      {
        "titulo": "T√≠tulo da Avalia√ß√£o",
        "tema": "Tema Principal",
        "disciplina": "Disciplina",
        "serie": "S√©rie/Ano",
        "tipo_avaliacao": "Tipo de Avalia√ß√£o",
        "instrucoes": "Instru√ß√µes para os Alunos",
        "questoes": [
          {
            "numero": 1,
            "enunciado": "Enunciado da Quest√£o",
            "tipo": "Tipo da Quest√£o",
            "opcoes": ["Op√ß√£o A", "Op√ß√£o B", "Op√ß√£o C", "Op√ß√£o D"] // Apenas para m√∫ltipla escolha
          }
        ],
        "gabarito": [
          {
            "questao": 1,
            "resposta": "Resposta Correta",
            "justificativa": "Justificativa da Resposta"
          }
        ]
      }

      IMPORTANTE:
      - Cada se√ß√£o deve ter entre 100-200 palavras.
      - Use formata√ß√£o HTML simples quando necess√°rio (negrito, it√°lico, listas).
      - Mantenha a linguagem adequada √† faixa et√°ria.
      - Seja pr√°tico e objetivo.
      - N√£o use markdown, apenas HTML simples.
      - Retorne APENAS o JSON v√°lido, sem texto adicional.
      `;

      responseStructure = `
        Estrutura esperada:
        {
          "titulo": "string",
          "tema": "string",
          "disciplina": "string",
          "serie": "string",
          "tipo_avaliacao": "string",
          "instrucoes": "string",
          "questoes": [
            {
              "numero": 1,
              "enunciado": "string",
              "tipo": "string",
              "opcoes": ["string"] // apenas para m√∫ltipla escolha
            }
          ],
          "gabarito": [
            {
              "questao": 1,
              "resposta": "string",
              "justificativa": "string"
            }
          ]
        }
      `;
    } else if (materialType === 'slide') {
      prompt = `
      Voc√™ √© um assistente pedag√≥gico especializado em criar apresenta√ß√µes em slides educacionais din√¢micas e visuais.
      
      INFORMA√á√ïES FORNECIDAS:
      - Tema: ${formData.tema}
      - Disciplina: ${formData.disciplina}
      - S√©rie/Ano: ${formData.serie}
      - Objetivos: ${Array.isArray(formData.objetivos) ? formData.objetivos.join(', ') : (formData.objetivos || 'N√£o especificado')}
      - N√∫mero de Slides: ${formData.numeroSlides || '10'}

      INSTRU√á√ïES ESPEC√çFICAS:
      1. Elabore uma apresenta√ß√£o em slides completa e bem estruturada.
      2. Use linguagem clara e adequada ao n√≠vel dos alunos.
      3. Inclua exemplos pr√°ticos e situa√ß√µes do cotidiano.
      4. Organize o conte√∫do de forma l√≥gica e progressiva.
      5. Mantenha o foco no tema principal.
      6. Evite linguagem muito t√©cnica ou complexa.
      7. Inclua elementos visuais quando apropriado (imagens, gr√°ficos, etc.).

      ESTRUTURA OBRIGAT√ìRIA:
      A apresenta√ß√£o deve conter exatamente as seguintes se√ß√µes:

      1. **T√≠tulo:** T√≠tulo claro e conciso da apresenta√ß√£o.
      2. **Tema:** Tema principal da apresenta√ß√£o.
      3. **Disciplina:** Disciplina relacionada ao tema.
      4. **S√©rie/Ano:** S√©rie ou ano escolar para o qual a apresenta√ß√£o √© destinada.
      5. **Slides:** Lista de slides com t√≠tulos e conte√∫dos claros e objetivos.
          - Cada slide deve ter um n√∫mero, t√≠tulo, conte√∫do e observa√ß√µes (se necess√°rio).

      FORMATO DE RESPOSTA:
      Retorne apenas um JSON v√°lido com a seguinte estrutura:

      {
        "titulo": "T√≠tulo da Apresenta√ß√£o",
        "tema": "Tema Principal",
        "disciplina": "Disciplina",
        "serie": "S√©rie/Ano",
        "slides": [
          {
            "numero": 1,
            "titulo": "T√≠tulo do Slide",
            "conteudo": "Conte√∫do do Slide",
            "observacoes": "Observa√ß√µes Adicionais"
          }
        ]
      }

      IMPORTANTE:
      - Cada se√ß√£o deve ter entre 100-200 palavras.
      - Use formata√ß√£o HTML simples quando necess√°rio (negrito, it√°lico, listas).
      - Mantenha a linguagem adequada √† faixa et√°ria.
      - Seja pr√°tico e objetivo.
      - N√£o use markdown, apenas HTML simples.
      - Retorne APENAS o JSON v√°lido, sem texto adicional.
      `;

      responseStructure = `
        Estrutura esperada:
        {
          "titulo": "string",
          "tema": "string",
          "disciplina": "string",
          "serie": "string",
          "slides": [
            {
              "numero": 1,
              "titulo": "string",
              "conteudo": "string",
              "observacoes": "string"
            }
          ]
        }
      `;
    } else {
      throw new Error(`Tipo de material n√£o suportado: ${materialType}`);
    }

    console.log('üéØ Generated prompt for', materialType);

    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openAIApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4o-mini',
        messages: [
          {
            role: 'system',
            content: 'Voc√™ √© um assistente pedag√≥gico especializado em criar materiais educacionais. Responda sempre em portugu√™s brasileiro e retorne apenas JSON v√°lido.'
          },
          {
            role: 'user',
            content: prompt
          }
        ],
        temperature: 0.7,
        max_tokens: 4000,
      }),
    });

    const data = await response.json();
    
    if (!response.ok) {
      console.error('OpenAI API error:', data);
      throw new Error(`OpenAI API error: ${data.error?.message || 'Unknown error'}`);
    }

    const content = data.choices[0].message.content;
    console.log('ü§ñ OpenAI response:', content);

    let parsedContent;
    try {
      // Remove possible markdown formatting
      const cleanContent = content.replace(/```json\n?|\n?```/g, '').trim();
      parsedContent = JSON.parse(cleanContent);
    } catch (error) {
      console.error('JSON parsing error:', error);
      console.error('Raw content:', content);
      throw new Error(`Erro ao processar resposta da IA: ${error.message}`);
    }

    // Convert structured content to HTML for apoio materials
    let htmlContent = '';
    if (materialType === 'apoio' && parsedContent) {
      // Novo template HTML para Material de Apoio
      htmlContent = `
        <!DOCTYPE html>
        <html lang="pt-BR">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Material de Apoio - ${parsedContent.titulo || 'Conte√∫do de Apoio'}</title>
            <style>
                @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');
                
                * {
                    margin: 0;
                    padding: 0;
                    box-sizing: border-box;
                }
                
                body {
                    font-family: 'Inter', sans-serif;
                    line-height: 1.6;
                    color: #333;
                    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                    min-height: 100vh;
                    padding: 20px;
                }
                
                .container {
                    max-width: 800px;
                    margin: 0 auto;
                    background: white;
                    border-radius: 20px;
                    box-shadow: 0 20px 40px rgba(0,0,0,0.1);
                    overflow: hidden;
                    position: relative;
                }
                
                .header {
                    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                    color: white;
                    padding: 40px;
                    text-align: center;
                    position: relative;
                    overflow: hidden;
                }
                
                .header::before {
                    content: '';
                    position: absolute;
                    top: -50%;
                    left: -50%;
                    width: 200%;
                    height: 200%;
                    background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><defs><pattern id="grain" width="100" height="100" patternUnits="userSpaceOnUse"><circle cx="20" cy="20" r="1" fill="rgba(255,255,255,0.1)"/><circle cx="80" cy="80" r="1" fill="rgba(255,255,255,0.1)"/><circle cx="40" cy="60" r="1" fill="rgba(255,255,255,0.1)"/><circle cx="70" cy="30" r="1" fill="rgba(255,255,255,0.1)"/></pattern></defs><rect width="100" height="100" fill="url(%23grain)"/></svg>');
                    animation: float 20s ease-in-out infinite;
                    pointer-events: none;
                }
                
                @keyframes float {
                    0%, 100% { transform: translate(0, 0) rotate(0deg); }
                    50% { transform: translate(-20px, -20px) rotate(2deg); }
                }
                
                .brand {
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    gap: 15px;
                    margin-bottom: 20px;
                    position: relative;
                    z-index: 2;
                }
                
                .logo {
                    width: 50px;
                    height: 50px;
                    background: rgba(255, 255, 255, 0.2);
                    border-radius: 12px;
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    backdrop-filter: blur(10px);
                    border: 1px solid rgba(255, 255, 255, 0.3);
                }
                
                .logo svg {
                    width: 28px;
                    height: 28px;
                    stroke: white;
                    fill: none;
                    stroke-width: 2;
                }
                
                .brand-text h1 {
                    font-size: 2rem;
                    font-weight: 700;
                    margin: 0;
                    letter-spacing: -0.5px;
                }
                
                .brand-text p {
                    font-size: 0.9rem;
                    opacity: 0.9;
                    margin: 5px 0 0 0;
                    font-weight: 300;
                }
                
                .subtitle {
                    font-size: 1.2rem;
                    opacity: 0.9;
                    font-weight: 300;
                    position: relative;
                    z-index: 2;
                }
                
                .content {
                    padding: 50px;
                }
                
                .title {
                    text-align: center;
                    margin-bottom: 40px;
                }
                
                .title h2 {
                    font-size: 2.5rem;
                    font-weight: 700;
                    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                    -webkit-background-clip: text;
                    -webkit-text-fill-color: transparent;
                    background-clip: text;
                    margin-bottom: 10px;
                    line-height: 1.2;
                }
                
                .theme-highlight {
                    display: inline-block;
                    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                    color: white;
                    padding: 8px 20px;
                    border-radius: 25px;
                    font-size: 1rem;
                    font-weight: 500;
                    margin-bottom: 30px;
                }
                
                .section {
                    margin-bottom: 40px;
                    padding: 30px;
                    background: #f8fafc;
                    border-radius: 16px;
                    border-left: 5px solid #667eea;
                    position: relative;
                    overflow: hidden;
                }
                
                .section::before {
                    content: '';
                    position: absolute;
                    top: 0;
                    right: 0;
                    width: 100px;
                    height: 100px;
                    background: linear-gradient(135deg, rgba(102, 126, 234, 0.1) 0%, rgba(118, 75, 162, 0.1) 100%);
                    border-radius: 50%;
                    transform: translate(30px, -30px);
                    pointer-events: none;
                }
                
                .section h3 {
                    color: #667eea;
                    font-size: 1.5rem;
                    font-weight: 600;
                    margin-bottom: 15px;
                    display: flex;
                    align-items: center;
                    gap: 10px;
                    position: relative;
                    z-index: 1;
                }
                
                .section-icon {
                    width: 24px;
                    height: 24px;
                    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                    border-radius: 6px;
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    color: white;
                    font-size: 14px;
                    font-weight: bold;
                    flex-shrink: 0;
                }
                
                .section-content {
                    font-size: 1rem;
                    line-height: 1.7;
                    color: #4a5568;
                    position: relative;
                    z-index: 1;
                }
                
                .section-content p {
                    margin-bottom: 15px;
                }
                
                .section-content ul, .section-content ol {
                    margin-left: 20px;
                    margin-bottom: 15px;
                }
                
                .section-content li {
                    margin-bottom: 8px;
                }
                
                .section-content strong {
                    color: #2d3748;
                    font-weight: 600;
                }
                
                .section-content em {
                    color: #667eea;
                    font-style: italic;
                }
                
                .footer {
                    background: #2d3748;
                    color: white;
                    padding: 30px;
                    text-align: center;
                }
                
                .footer-content {
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    gap: 15px;
                    margin-bottom: 15px;
                }
                
                .footer-logo {
                    width: 40px;
                    height: 40px;
                    background: rgba(102, 126, 234, 0.2);
                    border-radius: 10px;
                    display: flex;
                    align-items: center;
                    justify-content: center;
                }
                
                .footer-logo svg {
                    width: 20px;
                    height: 20px;
                    stroke: #667eea;
                    fill: none;
                    stroke-width: 2;
                }
                
                .footer-text {
                    font-size: 1.1rem;
                    font-weight: 600;
                    color: #667eea;
                }
                
                .footer-tagline {
                    font-size: 0.9rem;
                    opacity: 0.8;
                    font-style: italic;
                }
                
                .footer-bottom {
                    font-size: 0.8rem;
                    opacity: 0.7;
                    border-top: 1px solid rgba(255, 255, 255, 0.1);
                    padding-top: 15px;
                }
                
                @media (max-width: 768px) {
                    body {
                        padding: 10px;
                    }
                    
                    .header {
                        padding: 30px 20px;
                    }
                    
                    .brand {
                        flex-direction: column;
                        gap: 10px;
                    }
                    
                    .brand-text h1 {
                        font-size: 1.5rem;
                    }
                    
                    .content {
                        padding: 30px 20px;
                    }
                    
                    .title h2 {
                        font-size: 2rem;
                    }
                    
                    .section {
                        padding: 20px;
                    }
                    
                    .section h3 {
                        font-size: 1.3rem;
                    }
                    
                    .footer {
                        padding: 20px;
                    }
                    
                    .footer-content {
                        flex-direction: column;
                        gap: 10px;
                    }
                }
                
                @media print {
                    body {
                        background: white;
                        padding: 0;
                    }
                    
                    .container {
                        box-shadow: none;
                        border-radius: 0;
                    }
                    
                    .header::before {
                        display: none;
                    }
                    
                    .section::before {
                        display: none;
                    }
                }
            </style>
        </head>
        <body>
            <div class="container">
                <div class="header">
                    <div class="brand">
                        <div class="logo">
                            <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                <path d="M2 3h6a4 4 0 0 1 4 4v14a3 3 0 0 0-3-3H2z"/>
                                <path d="M22 3h-6a4 4 0 0 0-4 4v14a3 3 0 0 1 3-3h7z"/>
                            </svg>
                        </div>
                        <div class="brand-text">
                            <h1>AulagIA</h1>
                            <p>Sua aula com toque m√°gico</p>
                        </div>
                    </div>
                    <div class="subtitle">Material de Apoio Educacional</div>
                </div>
                
                <div class="content">
                    <div class="title">
                        <h2>${parsedContent.titulo || 'Material de Apoio'}</h2>
                        <div class="theme-highlight">Tema: ${parsedContent.tema_material_principal || formData.tema}</div>
                    </div>
                    
                    <div class="section">
                        <h3>
                            <div class="section-icon">üí°</div>
                            Explica√ß√£o Simples do Tema
                        </h3>
                        <div class="section-content">
                            ${parsedContent.explicacao_simples || 'Conte√∫do n√£o dispon√≠vel'}
                        </div>
                    </div>
                    
                    <div class="section">
                        <h3>
                            <div class="section-icon">üéØ</div>
                            Por que √© Importante?
                        </h3>
                        <div class="section-content">
                            ${parsedContent.por_que_importante || 'Conte√∫do n√£o dispon√≠vel'}
                        </div>
                    </div>
                    
                    <div class="section">
                        <h3>
                            <div class="section-icon">‚öôÔ∏è</div>
                            Como Funciona?
                        </h3>
                        <div class="section-content">
                            ${parsedContent.como_funciona || 'Conte√∫do n√£o dispon√≠vel'}
                        </div>
                    </div>
                    
                    <div class="section">
                        <h3>
                            <div class="section-icon">üåü</div>
                            Exemplos do Dia a Dia
                        </h3>
                        <div class="section-content">
                            ${parsedContent.exemplos_dia_a_dia || 'Conte√∫do n√£o dispon√≠vel'}
                        </div>
                    </div>
                    
                    <div class="section">
                        <h3>
                            <div class="section-icon">üìö</div>
                            Dicas de Estudo
                        </h3>
                        <div class="section-content">
                            ${parsedContent.dicas_estudo || 'Conte√∫do n√£o dispon√≠vel'}
                        </div>
                    </div>
                    
                    <div class="section">
                        <h3>
                            <div class="section-icon">‚úèÔ∏è</div>
                            Atividades Pr√°ticas
                        </h3>
                        <div class="section-content">
                            ${parsedContent.atividades_praticas || 'Conte√∫do n√£o dispon√≠vel'}
                        </div>
                    </div>
                    
                    <div class="section">
                        <h3>
                            <div class="section-icon">üîç</div>
                            Curiosidades
                        </h3>
                        <div class="section-content">
                            ${parsedContent.curiosidades || 'Conte√∫do n√£o dispon√≠vel'}
                        </div>
                    </div>
                </div>
                
                <div class="footer">
                    <div class="footer-content">
                        <div class="footer-logo">
                            <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                <path d="M2 3h6a4 4 0 0 1 4 4v14a3 3 0 0 0-3-3H2z"/>
                                <path d="M22 3h-6a4 4 0 0 0-4 4v14a3 3 0 0 1 3-3h7z"/>
                            </svg>
                        </div>
                        <div>
                            <div class="footer-text">AulagIA</div>
                            <div class="footer-tagline">Sua aula com toque m√°gico</div>
                        </div>
                    </div>
                    <div class="footer-bottom">
                        Material de Apoio gerado em ${new Date().toLocaleDateString('pt-BR')} ‚Ä¢ aulagia.com.br
                    </div>
                </div>
            </div>
        </body>
        </html>
      `;
    }

    // Save to database for apoio materials
    if (materialType === 'apoio') {
      try {
        const { error: saveError } = await supabase
          .from('materiais_apoio')
          .insert({
            user_id: formData.user_id,
            material_principal_id: formData.material_principal_id,
            titulo: parsedContent.titulo,
            tema: formData.tema,
            disciplina: formData.disciplina,
            turma: formData.serie,
            conteudo: htmlContent,
            status: 'ativo'
          });

        if (saveError) {
          console.error('Error saving apoio material:', saveError);
          throw new Error(`Erro ao salvar material de apoio: ${saveError.message}`);
        }

        console.log('‚úÖ Material de apoio salvo com sucesso');
      } catch (error) {
        console.error('Database save error:', error);
        throw new Error(`Erro ao salvar no banco: ${error.message}`);
      }
    }

    // Return the content (HTML for apoio, JSON for others)
    const finalContent = materialType === 'apoio' ? htmlContent : parsedContent;

    return new Response(
      JSON.stringify({
        success: true,
        content: finalContent,
        message: 'Material gerado com sucesso!'
      }),
      {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 200,
      }
    );

  } catch (error) {
    console.error('Error in gerarMaterialIA:', error);
    return new Response(
      JSON.stringify({
        success: false,
        error: error.message || 'Erro interno do servidor'
      }),
      {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 500,
      }
    );
  }
});
