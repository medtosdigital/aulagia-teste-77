
import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const openAIApiKey = Deno.env.get('OPENAI_API_KEY');

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

interface MaterialFormData {
  tema?: string;
  topic?: string;
  disciplina?: string;
  subject?: string;
  serie?: string;
  grade?: string;
  assuntos?: string[];
  subjects?: string[];
  tipoQuestoes?: string;
  tiposQuestoes?: string[];
  numeroQuestoes?: number;
  quantidadeQuestoes?: number;
  professor?: string;
  data?: string;
  duracao?: string;
  bncc?: string;
}

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { materialType, formData } = await req.json() as {
      materialType: 'plano-de-aula' | 'slides' | 'atividade' | 'avaliacao';
      formData: MaterialFormData;
    };

    console.log('üìã Generating material:', { materialType, formData });

    if (!openAIApiKey) {
      console.error('‚ùå OpenAI API key not configured');
      return new Response(JSON.stringify({ error: 'OpenAI API key not configured' }), {
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      });
    }

    // Generate the appropriate prompt based on material type
    const prompt = generatePrompt(materialType, formData);
    console.log('üéØ Generated prompt for', materialType);

    // Call OpenAI API
    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openAIApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4o',
        messages: [
          {
            role: 'system',
            content: 'Voc√™ √© um assistente especializado em criar materiais educacionais seguindo a BNCC. Retorne sempre conte√∫do estruturado e pedag√≥gico com base nas diretrizes brasileiras de educa√ß√£o. Seja espec√≠fico e detalhado em todas as se√ß√µes, evitando campos vazios ou incompletos. GERE TODO O CONTE√öDO baseado no tema, disciplina e s√©rie informados - n√£o use templates gen√©ricos. Use portugu√™s brasileiro correto, sem erros de gram√°tica ou ortografia.'
          },
          {
            role: 'user',
            content: prompt
          }
        ],
        temperature: 0.7,
        max_tokens: 4000,
      }),
    });

    if (!response.ok) {
      console.error('‚ùå OpenAI API error:', response.status, response.statusText);
      const errorData = await response.text();
      console.error('Error details:', errorData);
      return new Response(JSON.stringify({ error: 'Failed to generate content' }), {
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      });
    }

    const data = await response.json();
    const generatedContent = data.choices[0].message.content;

    console.log('‚úÖ Content generated successfully');

    // Parse the generated content and structure it appropriately
    const structuredContent = parseGeneratedContent(materialType, generatedContent, formData);

    return new Response(JSON.stringify({
      success: true,
      content: structuredContent,
      materialType,
      formData
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });

  } catch (error) {
    console.error('‚ùå Error in gerarMaterialIA function:', error);
    return new Response(JSON.stringify({ 
      error: 'Internal server error',
      details: error.message 
    }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});

function generatePrompt(materialType: string, formData: MaterialFormData): string {
  const tema = formData.tema || formData.topic || '';
  const disciplina = formData.disciplina || formData.subject || '';
  const serie = formData.serie || formData.grade || '';
  const professor = formData.professor || '';
  const data = formData.data || '';
  const duracao = formData.duracao || '';

  switch (materialType) {
    case 'plano-de-aula':
      return `
Voc√™ √© um professor especialista em planejamento pedag√≥gico de acordo com a BNCC (Base Nacional Comum Curricular).

Crie um plano de aula COMPLETO e DETALHADO com base nas seguintes informa√ß√µes:
- TEMA DA AULA: ${tema}
- DISCIPLINA: ${disciplina}
- S√âRIE/ANO: ${serie}

IMPORTANTE: GERE TODO O CONTE√öDO baseado especificamente no tema "${tema}" para a disciplina de ${disciplina} na s√©rie ${serie}. N√ÉO use conte√∫do gen√©rico.

REGRAS CR√çTICAS PARA RECURSOS POR ETAPA:
1. Cada etapa deve ter APENAS de 1 a 3 recursos espec√≠ficos e √∫nicos
2. N√ÉO repita recursos entre diferentes etapas - cada recurso deve ser usado apenas uma vez
3. Cada recurso deve ser espec√≠fico para a atividade daquela etapa
4. Use v√≠rgulas para separar recursos dentro de cada etapa
5. Cada recurso deve ser gramaticalmente correto e espec√≠fico

EXEMPLO DE RECURSOS CORRETOS:
- Introdu√ß√£o: "Quadro branco, marcadores coloridos"
- Desenvolvimento: "Material manipulativo, experimentos pr√°ticos"
- Pr√°tica: "Exerc√≠cios impressos, jogos educativos"
- Fechamento: "Fichas de avalia√ß√£o"

Retorne APENAS o JSON estruturado abaixo, preenchido com conte√∫do REAL e ESPEC√çFICO sobre "${tema}":

{
  "titulo": "Plano de Aula - ${tema}",
  "professor": "${professor}",
  "data": "${data}",
  "disciplina": "${disciplina}",
  "serie": "${serie}",
  "tema": "${tema}",
  "duracao": "[GERE uma dura√ß√£o adequada baseada no tema, por exemplo: 50 minutos, 100 minutos (2 aulas), etc]",
  "bncc": "[BUSQUE e RETORNE c√≥digos BNCC REAIS, ESPEC√çFICOS e OBRIGATORIAMENTE EXATOS para o tema '${tema}' em ${disciplina} na ${serie}. O c√≥digo BNCC deve ser SEMPRE o mais aderente e diretamente relacionado ao tema da aula, nunca gen√©rico. Exemplo: Se o tema for 'Geometria', retorne apenas c√≥digos BNCC que tratam de Geometria, como EF03MA17. N√ÉO retorne c√≥digos de outros temas. Se n√£o souber c√≥digos espec√≠ficos, deixe vazio.]",
  "objetivos": [
    "[OBJETIVO ESPEC√çFICO 1 sobre ${tema}]",
    "[OBJETIVO ESPEC√çFICO 2 sobre ${tema}]",
    "[OBJETIVO ESPEC√çFICO 3 sobre ${tema}]"
  ],
  "habilidades": [
    "[HABILIDADE ESPEC√çFICA 1 que ser√° desenvolvida com ${tema}]",
    "[HABILIDADE ESPEC√çFICA 2 que ser√° desenvolvida com ${tema}]",
    "[HABILIDADE ESPEC√çFICA 3 que ser√° desenvolvida com ${tema}]"
  ],
  "desenvolvimento": [
    { 
      "etapa": "Introdu√ß√£o", 
      "tempo": "[tempo espec√≠fico em minutos, ex: 10 minutos]", 
      "atividade": "[ATIVIDADE ESPEC√çFICA de introdu√ß√£o ao tema ${tema} - descreva detalhadamente o que ser√° feito]", 
      "recursos": "[1-3 RECURSOS √öNICOS espec√≠ficos APENAS para introdu√ß√£o, separados por v√≠rgula. Ex: Quadro branco, marcadores coloridos]" 
    },
    { 
      "etapa": "Desenvolvimento", 
      "tempo": "[tempo espec√≠fico em minutos, ex: 25 minutos]", 
      "atividade": "[ATIVIDADE ESPEC√çFICA de desenvolvimento do tema ${tema} - descreva detalhadamente o que ser√° feito]", 
      "recursos": "[1-3 RECURSOS √öNICOS espec√≠ficos APENAS para desenvolvimento, separados por v√≠rgula. Ex: Material manipulativo, experimentos pr√°ticos]" 
    },
    { 
      "etapa": "Pr√°tica", 
      "tempo": "[tempo espec√≠fico em minutos, ex: 10 minutos]", 
      "atividade": "[ATIVIDADE PR√ÅTICA ESPEC√çFICA sobre ${tema} - descreva detalhadamente o que ser√° feito]", 
      "recursos": "[1-3 RECURSOS √öNICOS espec√≠ficos APENAS para pr√°tica, separados por v√≠rgula. Ex: Exerc√≠cios impressos, jogos educativos]" 
    },
    { 
      "etapa": "Fechamento", 
      "tempo": "[tempo espec√≠fico em minutos, ex: 5 minutos]", 
      "atividade": "[ATIVIDADE ESPEC√çFICA de fechamento sobre ${tema} - descreva detalhadamente o que ser√° feito]", 
      "recursos": "[1-2 RECURSOS √öNICOS espec√≠ficos APENAS para fechamento, separados por v√≠rgula. Ex: Fichas de avalia√ß√£o]" 
    }
  ],
  "recursos": [
    "[RECURSO 1 espec√≠fico para ensinar ${tema}]",
    "[RECURSO 2 espec√≠fico para ensinar ${tema}]",
    "[RECURSO 3 espec√≠fico para ensinar ${tema}]"
  ],
  "conteudosProgramaticos": [
    "[CONTE√öDO ESPEC√çFICO 1 sobre ${tema}]",
    "[CONTE√öDO ESPEC√çFICO 2 sobre ${tema}]",
    "[CONTE√öDO ESPEC√çFICO 3 sobre ${tema}]"
  ],
  "metodologia": "[METODOLOGIA ESPEC√çFICA e detalhada para ensinar ${tema} em ${disciplina} para ${serie} - descreva como ser√° conduzida a aula]",
  "avaliacao": "[M√âTODO DE AVALIA√á√ÉO espec√≠fico para verificar aprendizado sobre ${tema} - descreva como ser√° avaliado]",
  "referencias": [
    "[REFER√äNCIA BIBLIOGR√ÅFICA 1 sobre ${tema} em ${disciplina}]",
    "[REFER√äNCIA BIBLIOGR√ÅFICA 2 sobre ${tema} em ${disciplina}]"
  ]
}

INSTRU√á√ïES FINAIS CR√çTICAS:
1. Cada etapa no "desenvolvimento" deve ter recursos √öNICOS que n√£o se repetem em outras etapas
2. Use v√≠rgulas para separar recursos dentro da string de cada etapa
3. Mantenha de 1 a 3 recursos por etapa (m√°ximo 3)
4. Os recursos devem ser espec√≠ficos e apropriados para a atividade daquela etapa
5. Use portugu√™s brasileiro correto sem erros gramaticais
6. N√ÉO REPITA recursos entre etapas diferentes
`;

    case 'slides':
      return `
Voc√™ √© um professor especialista em cria√ß√£o de slides educativos seguindo a BNCC.

Crie slides educativos ESPEC√çFICOS sobre "${tema}" para ${disciplina} na ${serie}.

IMPORTANTE: TODO O CONTE√öDO deve ser baseado especificamente no tema "${tema}". N√ÉO use conte√∫do gen√©rico.

Retorne APENAS o JSON estruturado com 12 slides espec√≠ficos sobre "${tema}":

{
  "titulo": "${tema} - ${disciplina}",
  "professor": "${professor}",
  "data": "${data}",
  "disciplina": "${disciplina}",
  "serie": "${serie}",
  "tema": "${tema}",
  "duracao": "[dura√ß√£o adequada para apresentar slides sobre ${tema}]",
  "bncc": "[c√≥digos BNCC relevantes para ${tema} em ${disciplina}]",
  "slide_1_titulo": "${tema}",
  "slide_1_subtitulo": "Aula de ${disciplina} - ${serie}",
  "objetivo_1": "[OBJETIVO 1 espec√≠fico sobre ${tema}]",
  "objetivo_2": "[OBJETIVO 2 espec√≠fico sobre ${tema}]",
  "objetivo_3": "[OBJETIVO 3 espec√≠fico sobre ${tema}]",
  "objetivo_4": "[OBJETIVO 4 espec√≠fico sobre ${tema}]",
  "introducao_texto": "[INTRODU√á√ÉO espec√≠fica sobre ${tema}]",
  "introducao_imagem": "[descri√ß√£o de imagem relevante para ${tema}]",
  "conceitos_texto": "[CONCEITOS fundamentais espec√≠ficos sobre ${tema}]",
  "conceito_principal": "[CONCEITO principal de ${tema}]",
  "conceitos_imagem": "[descri√ß√£o de imagem que ilustra conceitos de ${tema}]",
  "exemplo_titulo": "[T√çTULO de exemplo pr√°tico sobre ${tema}]",
  "exemplo_conteudo": "[EXEMPLO PR√ÅTICO espec√≠fico sobre ${tema}]",
  "exemplo_imagem": "[descri√ß√£o de imagem do exemplo de ${tema}]",
  "desenvolvimento_texto": "[DESENVOLVIMENTO espec√≠fico sobre ${tema}]",
  "ponto_1": "[PONTO 1 importante sobre ${tema}]",
  "ponto_2": "[PONTO 2 importante sobre ${tema}]",
  "desenvolvimento_imagem": "[descri√ß√£o de imagem de apoio para ${tema}]",
  "formula_titulo": "[T√çTULO de f√≥rmula/regra espec√≠fica de ${tema}]",
  "formula_principal": "[F√ìRMULA/REGRA principal de ${tema}]",
  "formula_explicacao": "[EXPLICA√á√ÉO da f√≥rmula/regra de ${tema}]",
  "tabela_titulo": "[T√çTULO de tabela espec√≠fica sobre ${tema}]",
  "coluna_1": "[cabe√ßalho coluna 1 sobre ${tema}]",
  "coluna_2": "[cabe√ßalho coluna 2 sobre ${tema}]",
  "coluna_3": "[cabe√ßalho coluna 3 sobre ${tema}]",
  "linha_1_col_1": "[dado espec√≠fico de ${tema}]",
  "linha_1_col_2": "[dado espec√≠fico de ${tema}]",
  "linha_1_col_3": "[dado espec√≠fico de ${tema}]",
  "linha_2_col_1": "[dado espec√≠fico de ${tema}]",
  "linha_2_col_2": "[dado espec√≠fico de ${tema}]",
  "linha_2_col_3": "[dado espec√≠fico de ${tema}]",
  "linha_3_col_1": "[dado espec√≠fico de ${tema}]",
  "linha_3_col_2": "[dado espec√≠fico de ${tema}]",
  "linha_3_col_3": "[dado espec√≠fico de ${tema}]",
  "imagem_titulo": "[T√çTULO descritivo sobre ${tema}]",
  "imagem_descricao": "[DESCRI√á√ÉO do que a imagem mostra sobre ${tema}]",
  "imagem_principal": "[DESCRI√á√ÉO detalhada da imagem principal sobre ${tema}]",
  "atividade_pergunta": "[PERGUNTA espec√≠fica sobre ${tema}]",
  "opcao_a": "[alternativa A sobre ${tema}]",
  "opcao_b": "[alternativa B sobre ${tema}]",
  "opcao_c": "[alternativa C sobre ${tema}]",
  "opcao_d": "[alternativa D sobre ${tema}]",
  "conclusao_texto": "[S√çNTESE dos pontos principais sobre ${tema}]",
  "ponto_chave_1": "[PONTO-CHAVE 1 para memorizar sobre ${tema}]",
  "ponto_chave_2": "[PONTO-CHAVE 2 para memorizar sobre ${tema}]",
  "proximo_passo_1": "[PASSO 1 para continuar estudando ${tema}]",
  "proximo_passo_2": "[PASSO 2 para continuar estudando ${tema}]",
  "proximo_passo_3": "[PASSO 3 para continuar estudando ${tema}]"
}

GERE conte√∫do REAL e ESPEC√çFICO sobre "${tema}". Adapte √† faixa et√°ria de ${serie}. Use portugu√™s brasileiro correto.
`;

    case 'atividade':
      const numQuestoes = formData.numeroQuestoes || formData.quantidadeQuestoes || 5;
      const tipoQuestoes = formData.tipoQuestoes || 'mistas';
      return `
Crie uma atividade educacional ESPEC√çFICA sobre "${tema}" para ${disciplina} na ${serie}".

IMPORTANTE: As quest√µes devem ser ESPEC√çFICAS sobre "${tema}". N√ÉO use quest√µes gen√©ricas.

ATEN√á√ÉO: NUNCA retorne o campo "bncc" como {bncc}, {{bncc}}, vazio ou com texto gen√©rico. Se n√£o souber o c√≥digo exato, deixe o campo vazio.

REGRAS CR√çTICAS PARA QUEST√ïES FECHADAS:
- Para quest√µes de m√∫ltipla escolha, SEMPRE gere o campo "opcoes" com 5 alternativas reais e espec√≠ficas (A, B, C, D, E), relacionadas ao enunciado. N√ÉO gere quest√µes sem alternativas.
- Para quest√µes de ligar, SEMPRE gere os campos "colunaA" e "colunaB" com pelo menos 3 pares de itens relacionados ao tema. N√ÉO gere quest√µes de ligar sem pares.
- Para quest√µes de verdadeiro/falso, SEMPRE gere o campo "opcoes": ["Verdadeiro", "Falso"].
- Se n√£o conseguir gerar alternativas reais, N√ÉO gere a quest√£o.

Sempre que a quest√£o (inclusive aberta/dissertativa) fizer refer√™ncia ou exigir visualiza√ß√£o de uma imagem, gr√°fico, tabela, figura geom√©trica ou √≠cone, GERE o campo correspondente de forma SEM√ÇNTICA e EXATA ao enunciado. Exemplo: se a quest√£o pede para analisar uma c√©lula, gere uma imagem realista de c√©lula; se pede para analisar um gr√°fico, gere um gr√°fico relevante ao contexto da pergunta; se pede para observar uma figura geom√©trica, gere a figura correta.

Campos visuais poss√≠veis:
- "imagem": URL de uma imagem ilustrativa EXATA para a quest√£o (ex: c√©lula, gr√°fico, figura geom√©trica, tabela, etc)
- "icones": array de nomes de √≠cones relevantes
- "grafico": objeto com tipo, labels e dados para um gr√°fico real
- "figuraGeometrica": tipo e par√¢metros de uma figura geom√©trica real

Esses campos podem aparecer em qualquer tipo de quest√£o, inclusive abertas/dissertativas, sempre que o enunciado exigir ou mencionar o elemento visual.

Exemplo de quest√£o aberta com imagem:
{
  "numero": 2,
  "tipo": "dissertativa",
  "pergunta": "Observe a imagem da c√©lula abaixo e descreva suas principais organelas.",
  "imagem": "https://link-para-imagem-celula-realista.png"
}

Gere quest√µes dos seguintes tipos, alternando entre eles se o tipo for 'mistas':
- "multipla_escolha": sempre use o campo "opcoes" (ex: ["A", "B", "C", "D", "E"]), e adicione imagens ou √≠cones quando poss√≠vel
- "ligar": use os campos "colunaA" e "colunaB" (ex: colunaA: ["item1", "item2"], colunaB: ["resp1", "resp2"]), podendo adicionar imagens ou √≠cones em cada item
- "verdadeiro_falso": use o campo "opcoes" com ["Verdadeiro", "Falso"]
- "completar": use o campo "textoComLacunas" (ex: "O Sol √© ___ e a Lua √© ___")
- "dissertativa": gere perguntas abertas com espa√ßo para resposta
- "desenho": gere perguntas abertas que pe√ßam para o aluno desenhar ou criar algo visual (ex: "Desenhe um tri√¢ngulo e pinte seus lados.")

Retorne APENAS o JSON estruturado:

{
  "titulo": "Atividade - ${tema}",
  "professor": "${professor}",
  "data": "${data}",
  "disciplina": "${disciplina}",
  "serie": "${serie}",
  "tema": "${tema}",
  "duracao": "[dura√ß√£o adequada para resolver atividade sobre ${tema}]",
  "bncc": "[BUSQUE e RETORNE c√≥digos BNCC REAIS, ESPEC√çFICOS e OBRIGATORIAMENTE EXATOS para o tema '${tema}' em ${disciplina} na ${serie}. O c√≥digo BNCC deve ser SEMPRE o mais aderente e diretamente relacionado ao tema da atividade, nunca gen√©rico. Exemplo: Se o tema for 'Geometria', retorne apenas c√≥digos BNCC que tratam de Geometria, como EF03MA17. N√ÉO retorne c√≥digos de outros temas. Se n√£o souber c√≥digos espec√≠ficos, deixe vazio.]",
  "instrucoes": "Complete as quest√µes abaixo sobre ${tema}. Leia atentamente cada enunciado antes de responder.",
  "questoes": [
    ${Array.from({length: numQuestoes}, (_, i) => `{
      "numero": ${i + 1},
      "tipo": "${tipoQuestoes === 'fechadas' ? 'multipla_escolha' : tipoQuestoes === 'abertas' ? 'dissertativa' : tipoQuestoes === 'ligar' ? 'ligar' : tipoQuestoes === 'verdadeiro_falso' ? 'verdadeiro_falso' : tipoQuestoes === 'completar' ? 'completar' : (i % 5 === 0 ? 'multipla_escolha' : i % 5 === 1 ? 'ligar' : i % 5 === 2 ? 'verdadeiro_falso' : i % 5 === 3 ? 'completar' : 'dissertativa')}",
      "pergunta": "[PERGUNTA ${i + 1} espec√≠fica sobre ${tema}]",
      ${(tipoQuestoes === 'fechadas' || (tipoQuestoes === 'mistas' && i % 5 === 0)) ? `
      "opcoes": [
        "[alternativa A espec√≠fica sobre ${tema}]",
        "[alternativa B espec√≠fica sobre ${tema}]",
        "[alternativa C espec√≠fica sobre ${tema}]",
        "[alternativa D espec√≠fica sobre ${tema}]",
        "[alternativa E espec√≠fica sobre ${tema}]"
      ],
      "resposta_correta": 0` : ''}
      ${(tipoQuestoes === 'ligar' || (tipoQuestoes === 'mistas' && i % 5 === 1)) ? `
      "colunaA": [
        "[item 1 de coluna A sobre ${tema}]",
        "[item 2 de coluna A sobre ${tema}]",
        "[item 3 de coluna A sobre ${tema}]"
      ],
      "colunaB": [
        "[item 1 de coluna B correspondente sobre ${tema}]",
        "[item 2 de coluna B correspondente sobre ${tema}]",
        "[item 3 de coluna B correspondente sobre ${tema}]"
      ]` : ''}
      ${(tipoQuestoes === 'verdadeiro_falso' || (tipoQuestoes === 'mistas' && i % 5 === 2)) ? `
      "opcoes": ["Verdadeiro", "Falso"],
      "resposta_correta": 0` : ''}
      ${(tipoQuestoes === 'completar' || (tipoQuestoes === 'mistas' && i % 5 === 3)) ? `
      "textoComLacunas": "[Frase com lacunas sobre ${tema}]"` : ''}
      // dissertativa n√£o precisa de campo extra
    }`).join(',\n    ')}
  ],
  "criterios_avaliacao": [
    "Compreens√£o dos conceitos sobre ${tema}",
    "Clareza na express√£o das ideias sobre ${tema}",
    "Aplica√ß√£o correta do conhecimento sobre ${tema}"
  ]
}

GERE quest√µes REAIS e ESPEC√çFICAS sobre "${tema}". Adeque √† ${serie}. Use portugu√™s brasileiro correto.
`;

    case 'avaliacao':
      const numQuestoesAval = formData.numeroQuestoes || formData.quantidadeQuestoes || 5;
      const tipoQuestoesAval = formData.tipoQuestoes || 'mistas';
      const assuntos = formData.assuntos || formData.subjects || [tema];
      return `
Crie uma avalia√ß√£o educacional ESPEC√çFICA sobre "${tema}" e assuntos relacionados: ${assuntos.join(', ')} para ${disciplina} na ${serie}.

IMPORTANTE: As quest√µes devem ser ESPEC√çFICAS sobre "${tema}" e os assuntos informados. N√ÉO use quest√µes gen√©ricas.

Retorne APENAS o JSON estruturado:

{
  "titulo": "Avalia√ß√£o - ${tema}",
  "professor": "${professor}",
  "data": "${data}",
  "disciplina": "${disciplina}",
  "serie": "${serie}",
  "tema": "${assuntos.join(', ')}",
  "duracao": "[dura√ß√£o adequada para avalia√ß√£o sobre ${tema}]",
  "bncc": "[c√≥digos BNCC relevantes para ${tema}]",
  "instrucoes": "Responda √†s quest√µes abaixo sobre ${assuntos.join(', ')}. Esta √© uma avalia√ß√£o formal.",
  "questoes": [
    ${Array.from({length: numQuestoesAval}, (_, i) => `{
      "numero": ${i + 1},
      "tipo": "${tipoQuestoesAval === 'fechadas' ? 'multipla_escolha' : tipoQuestoesAval === 'abertas' ? 'aberta' : (i % 2 === 0 ? 'multipla_escolha' : 'aberta')}",
      "pergunta": "[PERGUNTA ${i + 1} espec√≠fica sobre ${assuntos[i % assuntos.length]}]",
      ${tipoQuestoesAval === 'fechadas' || (tipoQuestoesAval === 'mistas' && i % 2 === 0) ? `
      "alternativas": [
        "[alternativa A espec√≠fica sobre ${assuntos[i % assuntos.length]}]",
        "[alternativa B espec√≠fica sobre ${assuntos[i % assuntos.length]}]",
        "[alternativa C espec√≠fica sobre ${assuntos[i % assuntos.length]}]",
        "[alternativa D espec√≠fica sobre ${assuntos[i % assuntos.length]}]"
      ],
      "resposta_correta": 0` : ''}
    }`).join(',\n    ')}
  ],
  "criterios_avaliacao": [
    "Compreens√£o dos conceitos sobre ${tema} (25%)",
    "Clareza na express√£o das ideias (25%)",
    "Aplica√ß√£o correta do conhecimento sobre ${tema} (50%)"
  ]
}

GERE quest√µes REAIS e ESPEC√çFICAS. Use n√≠vel apropriado para avalia√ß√£o formal na ${serie}. Use portugu√™s brasileiro correto.
`;

    default:
      return `Crie um material educacional ESPEC√çFICO sobre "${tema}" para ${disciplina}, s√©rie ${serie}. GERE conte√∫do REAL baseado no tema informado. Use portugu√™s brasileiro correto.`;
  }
}

function cleanResourcesForStage(recursos: string): string[] {
  if (!recursos || typeof recursos !== 'string') return [];
  
  return recursos
    .split(',')
    .map(recurso => recurso.trim())
    .filter(recurso => recurso.length > 0)
    .slice(0, 3); // Limita a 3 recursos por etapa
}

function parseGeneratedContent(materialType: string, content: string, formData: MaterialFormData): any {
  const tema = formData.tema || formData.topic || '';
  const disciplina = formData.disciplina || formData.subject || '';
  const serie = formData.serie || formData.grade || '';
  const professor = formData.professor || '';
  const data = formData.data || '';

  try {
    // Try to parse JSON directly from generated content
    const jsonMatch = content.match(/\{[\s\S]*\}/);
    if (jsonMatch) {
      try {
        const parsedContent = JSON.parse(jsonMatch[0]);
        // Preserve form fields
        parsedContent.professor = professor;
        parsedContent.data = data;
        parsedContent.disciplina = disciplina;
        parsedContent.serie = serie;
        parsedContent.tema = tema;

        // Valida√ß√£o rigorosa do campo BNCC para atividades e planos de aula
        if (parsedContent.bncc) {
          const bncc = parsedContent.bncc.trim();
          if (
            bncc === '' ||
            bncc === '{bncc}' ||
            bncc === '{{bncc}}' ||
            bncc.toLowerCase().includes('busque e retorne c√≥digos bncc') ||
            bncc.toLowerCase().includes('c√≥digos bncc relevantes') ||
            bncc.toLowerCase().includes('exemplo: se o tema for')
          ) {
            parsedContent.bncc = '';
          }
        }

        // Special handling for lesson plans - ensure resources are properly structured per stage
        if (materialType === 'plano-de-aula' && parsedContent.desenvolvimento) {
          console.log('üîß Processing lesson plan resources by stage');
          // Process each stage to ensure unique and limited resources
          const processedEtapas = parsedContent.desenvolvimento.map((etapa: any, index: number) => {
            if (etapa.recursos && typeof etapa.recursos === 'string') {
              // Clean and limit resources for this specific stage
              const cleanedResources = cleanResourcesForStage(etapa.recursos);
              etapa.recursos = cleanedResources.join(', ');
              console.log(`‚úÖ Stage ${etapa.etapa}: ${cleanedResources.length} resources - ${etapa.recursos}`);
            }
            return etapa;
          });
          parsedContent.desenvolvimento = processedEtapas;
          // Create comprehensive resources list from all stages without duplicates
          const allResources = new Set<string>();
          parsedContent.desenvolvimento.forEach((etapa: any) => {
            if (etapa.recursos && typeof etapa.recursos === 'string') {
              const recursos = etapa.recursos.split(',').map((r: string) => r.trim()).filter((r: string) => r.length > 0);
              recursos.forEach((recurso: string) => allResources.add(recurso));
            }
          });
          // Update main resources list
          parsedContent.recursos = Array.from(allResources);
          console.log(`üìã Total unique resources: ${parsedContent.recursos.length}`);
        }

        // Compatibilidade retroativa: converter 'alternativas' para 'opcoes' em cada quest√£o e garantir campos corretos para todos os tipos
        if (parsedContent.questoes && Array.isArray(parsedContent.questoes)) {
          let tiposPermitidos = formData.tiposQuestoes || [];
          if (!Array.isArray(tiposPermitidos) || tiposPermitidos.length === 0) {
            tiposPermitidos = ['multipla_escolha', 'ligar', 'verdadeiro_falso', 'completar', 'dissertativa', 'desenho'];
          }
          parsedContent.questoes = parsedContent.questoes
            .map((q: any) => {
              // Compatibilidade: mapear 'aberta' para 'dissertativa'
              if (q.tipo === 'aberta') q.tipo = 'dissertativa';
              // M√∫ltipla escolha e verdadeiro/falso
              if (q.alternativas && !q.opcoes) {
                q.opcoes = q.alternativas;
                delete q.alternativas;
              }
              // Verdadeiro/Falso: garantir opcoes
              if (q.tipo === 'verdadeiro_falso' && (!q.opcoes || q.opcoes.length === 0)) {
                q.opcoes = ['Verdadeiro', 'Falso'];
              }
              // Ligar: garantir colunas
              if (q.tipo === 'ligar') {
                q.colunaA = q.colunaA || [];
                q.colunaB = q.colunaB || [];
              }
              // Completar: garantir textoComLacunas
              if (q.tipo === 'completar' && !q.textoComLacunas) {
                q.textoComLacunas = '';
              }
              // Dissertativa: garantir linhasResposta
              if (q.tipo === 'dissertativa' && !q.linhasResposta) {
                q.linhasResposta = 5;
              }
              // Garantir que campos visuais sejam preservados em qualquer tipo
              q.imagem = q.imagem || undefined;
              q.grafico = q.grafico || undefined;
              q.figuraGeometrica = q.figuraGeometrica || undefined;
              q.icones = q.icones || undefined;
              return q;
            })
            .filter((q: any) => {
              // Filtrar apenas tipos permitidos
              if (!tiposPermitidos.includes(q.tipo)) return false;
              // Multipla escolha: precisa de opcoes
              if (q.tipo === 'multipla_escolha' && (!q.opcoes || q.opcoes.length < 4)) return false;
              // Ligar: precisa de colunas
              if (q.tipo === 'ligar' && (!q.colunaA || q.colunaA.length < 2 || !q.colunaB || q.colunaB.length < 2)) return false;
              // Verdadeiro/falso: precisa de opcoes
              if (q.tipo === 'verdadeiro_falso' && (!q.opcoes || q.opcoes.length < 2)) return false;
              // Desenho: n√£o precisa de campo extra
              return true;
            });
        }

        console.log('‚úÖ Content parsed successfully:', materialType);
        return parsedContent;
      } catch (parseError) {
        console.error('‚ùå Error parsing JSON:', parseError);
      }
    }

    // Fallback: basic structure if parsing fails
    console.log('‚ö†Ô∏è Using fallback for basic structure');
    return {
      titulo: `${materialType} - ${tema}`,
      professor,
      data,
      disciplina,
      serie,
      tema,
      duracao: '',
      bncc: '',
      content: content
    };

  } catch (error) {
    console.error('‚ùå Error in parseGeneratedContent:', error);
    return {
      titulo: `${materialType} - ${tema}`,
      professor,
      data,
      disciplina,
      serie,
      tema,
      duracao: '',
      bncc: '',
      content: content
    };
  }
}

