import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const openAIApiKey = Deno.env.get('OPENAI_API_KEY');

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

interface MaterialFormData {
  tema?: string;
  topic?: string;
  disciplina?: string;
  subject?: string;
  serie?: string;
  grade?: string;
  assuntos?: string[];
  subjects?: string[];
  tipoQuestoes?: string;
  tiposQuestoes?: string[];
  numeroQuestoes?: number;
  quantidadeQuestoes?: number;
  professor?: string;
  data?: string;
  duracao?: string;
  bncc?: string;
}

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { materialType, formData } = await req.json() as {
      materialType: 'plano-de-aula' | 'slides' | 'atividade' | 'avaliacao';
      formData: MaterialFormData;
    };

    console.log('üìã Generating material:', { materialType, formData });

    if (!openAIApiKey) {
      console.error('‚ùå OpenAI API key not configured');
      return new Response(JSON.stringify({ error: 'OpenAI API key not configured' }), {
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      });
    }

    // Generate the appropriate prompt based on material type
    const prompt = generatePrompt(materialType, formData);
    console.log('üéØ Generated prompt for', materialType);

    // Call OpenAI API
    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openAIApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4o',
        messages: [
          {
            role: 'system',
            content: 'Voc√™ √© um assistente especializado em criar materiais educacionais seguindo a BNCC. Retorne sempre conte√∫do estruturado e pedag√≥gico com base nas diretrizes brasileiras de educa√ß√£o. Seja espec√≠fico e detalhado em todas as se√ß√µes, evitando campos vazios ou incompletos. GERE TODO O CONTE√öDO baseado no tema, disciplina e s√©rie informados - n√£o use templates gen√©ricos. Use portugu√™s brasileiro correto, sem erros de gram√°tica ou ortografia.'
          },
          {
            role: 'user',
            content: prompt
          }
        ],
        temperature: 0.7,
        max_tokens: 4000,
      }),
    });

    if (!response.ok) {
      console.error('‚ùå OpenAI API error:', response.status, response.statusText);
      const errorData = await response.text();
      console.error('Error details:', errorData);
      return new Response(JSON.stringify({ error: 'Failed to generate content' }), {
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      });
    }

    const data = await response.json();
    const generatedContent = data.choices[0].message.content;

    console.log('‚úÖ Content generated successfully');

    // Parse the generated content and structure it appropriately
    const structuredContent = parseGeneratedContent(materialType, generatedContent, formData);

    return new Response(JSON.stringify({
      success: true,
      content: structuredContent,
      materialType,
      formData
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });

  } catch (error) {
    console.error('‚ùå Error in gerarMaterialIA function:', error);
    return new Response(JSON.stringify({ 
      error: 'Internal server error',
      details: error.message 
    }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});

function generatePrompt(materialType: string, formData: MaterialFormData): string {
  const tema = formData.tema || formData.topic || '';
  const disciplina = formData.disciplina || formData.subject || '';
  const serie = formData.serie || formData.grade || '';
  const professor = formData.professor || '';
  const data = formData.data || '';
  const duracao = formData.duracao || '';

  switch (materialType) {
    case 'plano-de-aula':
      return `
Voc√™ √© um professor especialista em planejamento pedag√≥gico de acordo com a BNCC (Base Nacional Comum Curricular).

Crie um plano de aula COMPLETO e DETALHADO com base nas seguintes informa√ß√µes:
- TEMA DA AULA: ${tema}
- DISCIPLINA: ${disciplina}
- S√âRIE/ANO: ${serie}

IMPORTANTE: GERE TODO O CONTE√öDO baseado especificamente no tema "${tema}" para a disciplina de ${disciplina} na s√©rie ${serie}. N√ÉO use conte√∫do gen√©rico.

ATEN√á√ÉO ESPECIAL PARA RECURSOS: Cada etapa do desenvolvimento deve ter seus pr√≥prios recursos espec√≠ficos para aquela etapa. N√ÉO repita recursos entre etapas. N√ÉO misture recursos. Cada etapa tem recursos √∫nicos e apropriados para sua atividade espec√≠fica.

Retorne APENAS o JSON estruturado abaixo, preenchido com conte√∫do REAL e ESPEC√çFICO sobre "${tema}":

{
  "titulo": "Plano de Aula - ${tema}",
  "professor": "${professor}",
  "data": "${data}",
  "disciplina": "${disciplina}",
  "serie": "${serie}",
  "tema": "${tema}",
  "duracao": "[GERE uma dura√ß√£o adequada baseada no tema, por exemplo: 50 minutos, 100 minutos (2 aulas), etc]",
  "bncc": "[BUSQUE e RETORNE c√≥digos BNCC REAIS e espec√≠ficos para ${tema} em ${disciplina} na ${serie}. Exemplo: EF05MA08, EF67LP03. Se n√£o souber c√≥digos espec√≠ficos, deixe vazio]",
  "objetivos": [
    "[OBJETIVO ESPEC√çFICO 1 sobre ${tema}]",
    "[OBJETIVO ESPEC√çFICO 2 sobre ${tema}]",
    "[OBJETIVO ESPEC√çFICO 3 sobre ${tema}]"
  ],
  "habilidades": [
    "[HABILIDADE ESPEC√çFICA 1 que ser√° desenvolvida com ${tema}]",
    "[HABILIDADE ESPEC√çFICA 2 que ser√° desenvolvida com ${tema}]",
    "[HABILIDADE ESPEC√çFICA 3 que ser√° desenvolvida com ${tema}]"
  ],
  "desenvolvimento": [
    { 
      "etapa": "Introdu√ß√£o", 
      "tempo": "[tempo espec√≠fico em minutos, ex: 10 minutos]", 
      "atividade": "[ATIVIDADE ESPEC√çFICA de introdu√ß√£o ao tema ${tema} - descreva detalhadamente o que ser√° feito]", 
      "recursos": "[RECURSOS ESPEC√çFICOS APENAS para esta etapa de introdu√ß√£o, ex: quadro, slides espec√≠ficos da introdu√ß√£o]" 
    },
    { 
      "etapa": "Desenvolvimento", 
      "tempo": "[tempo espec√≠fico em minutos, ex: 25 minutos]", 
      "atividade": "[ATIVIDADE ESPEC√çFICA de desenvolvimento do tema ${tema} - descreva detalhadamente o que ser√° feito]", 
      "recursos": "[RECURSOS ESPEC√çFICOS APENAS para esta etapa de desenvolvimento, ex: materiais manipul√°veis, experimentos]" 
    },
    { 
      "etapa": "Pr√°tica", 
      "tempo": "[tempo espec√≠fico em minutos, ex: 10 minutos]", 
      "atividade": "[ATIVIDADE PR√ÅTICA ESPEC√çFICA sobre ${tema} - descreva detalhadamente o que ser√° feito]", 
      "recursos": "[RECURSOS ESPEC√çFICOS APENAS para esta etapa pr√°tica, ex: exerc√≠cios impressos, jogos educativos]" 
    },
    { 
      "etapa": "Fechamento", 
      "tempo": "[tempo espec√≠fico em minutos, ex: 5 minutos]", 
      "atividade": "[ATIVIDADE ESPEC√çFICA de fechamento sobre ${tema} - descreva detalhadamente o que ser√° feito]", 
      "recursos": "[RECURSOS ESPEC√çFICOS APENAS para esta etapa de fechamento, ex: fichas de avalia√ß√£o, cartazes de s√≠ntese]" 
    }
  ],
  "recursos": [
    "[RECURSO 1 espec√≠fico para ensinar ${tema}]",
    "[RECURSO 2 espec√≠fico para ensinar ${tema}]",
    "[RECURSO 3 espec√≠fico para ensinar ${tema}]",
    "[RECURSO 4 espec√≠fico para ensinar ${tema}]",
    "[RECURSO 5 espec√≠fico para ensinar ${tema}]"
  ],
  "conteudosProgramaticos": [
    "[CONTE√öDO ESPEC√çFICO 1 sobre ${tema}]",
    "[CONTE√öDO ESPEC√çFICO 2 sobre ${tema}]",
    "[CONTE√öDO ESPEC√çFICO 3 sobre ${tema}]"
  ],
  "metodologia": "[METODOLOGIA ESPEC√çFICA e detalhada para ensinar ${tema} em ${disciplina} para ${serie} - descreva como ser√° conduzida a aula]",
  "avaliacao": "[M√âTODO DE AVALIA√á√ÉO espec√≠fico para verificar aprendizado sobre ${tema} - descreva como ser√° avaliado]",
  "referencias": [
    "[REFER√äNCIA BIBLIOGR√ÅFICA 1 sobre ${tema} em ${disciplina}]",
    "[REFER√äNCIA BIBLIOGR√ÅFICA 2 sobre ${tema} em ${disciplina}]"
  ]
}

INSTRU√á√ïES CR√çTICAS:
1. GERE conte√∫do REAL e ESPEC√çFICO sobre "${tema}". N√ÉO deixe placeholders ou campos gen√©ricos.
2. Cada etapa do desenvolvimento deve ter recursos ESPEC√çFICOS E √öNICOS para aquela etapa apenas.
3. N√ÉO repita recursos entre etapas diferentes.
4. A se√ß√£o "recursos" deve conter TODOS os recursos √∫nicos utilizados em todas as etapas.
5. Use portugu√™s brasileiro correto, sem erros de gram√°tica ou ortografia.
6. Os tempos devem somar aproximadamente a dura√ß√£o total da aula.
7. Cada recurso deve ser um item completo e correto gramaticalmente.
`;

    case 'slides':
      return `
Voc√™ √© um professor especialista em cria√ß√£o de slides educativos seguindo a BNCC.

Crie slides educativos ESPEC√çFICOS sobre "${tema}" para ${disciplina} na ${serie}.

IMPORTANTE: TODO O CONTE√öDO deve ser baseado especificamente no tema "${tema}". N√ÉO use conte√∫do gen√©rico.

Retorne APENAS o JSON estruturado com 12 slides espec√≠ficos sobre "${tema}":

{
  "titulo": "${tema} - ${disciplina}",
  "professor": "${professor}",
  "data": "${data}",
  "disciplina": "${disciplina}",
  "serie": "${serie}",
  "tema": "${tema}",
  "duracao": "[dura√ß√£o adequada para apresentar slides sobre ${tema}]",
  "bncc": "[c√≥digos BNCC relevantes para ${tema} em ${disciplina}]",
  "slide_1_titulo": "${tema}",
  "slide_1_subtitulo": "Aula de ${disciplina} - ${serie}",
  "objetivo_1": "[OBJETIVO 1 espec√≠fico sobre ${tema}]",
  "objetivo_2": "[OBJETIVO 2 espec√≠fico sobre ${tema}]",
  "objetivo_3": "[OBJETIVO 3 espec√≠fico sobre ${tema}]",
  "objetivo_4": "[OBJETIVO 4 espec√≠fico sobre ${tema}]",
  "introducao_texto": "[INTRODU√á√ÉO espec√≠fica sobre ${tema}]",
  "introducao_imagem": "[descri√ß√£o de imagem relevante para ${tema}]",
  "conceitos_texto": "[CONCEITOS fundamentais espec√≠ficos sobre ${tema}]",
  "conceito_principal": "[CONCEITO principal de ${tema}]",
  "conceitos_imagem": "[descri√ß√£o de imagem que ilustra conceitos de ${tema}]",
  "exemplo_titulo": "[T√çTULO de exemplo pr√°tico sobre ${tema}]",
  "exemplo_conteudo": "[EXEMPLO PR√ÅTICO espec√≠fico sobre ${tema}]",
  "exemplo_imagem": "[descri√ß√£o de imagem do exemplo de ${tema}]",
  "desenvolvimento_texto": "[DESENVOLVIMENTO espec√≠fico sobre ${tema}]",
  "ponto_1": "[PONTO 1 importante sobre ${tema}]",
  "ponto_2": "[PONTO 2 importante sobre ${tema}]",
  "desenvolvimento_imagem": "[descri√ß√£o de imagem de apoio para ${tema}]",
  "formula_titulo": "[T√çTULO de f√≥rmula/regra espec√≠fica de ${tema}]",
  "formula_principal": "[F√ìRMULA/REGRA principal de ${tema}]",
  "formula_explicacao": "[EXPLICA√á√ÉO da f√≥rmula/regra de ${tema}]",
  "tabela_titulo": "[T√çTULO de tabela espec√≠fica sobre ${tema}]",
  "coluna_1": "[cabe√ßalho coluna 1 sobre ${tema}]",
  "coluna_2": "[cabe√ßalho coluna 2 sobre ${tema}]",
  "coluna_3": "[cabe√ßalho coluna 3 sobre ${tema}]",
  "linha_1_col_1": "[dado espec√≠fico de ${tema}]",
  "linha_1_col_2": "[dado espec√≠fico de ${tema}]",
  "linha_1_col_3": "[dado espec√≠fico de ${tema}]",
  "linha_2_col_1": "[dado espec√≠fico de ${tema}]",
  "linha_2_col_2": "[dado espec√≠fico de ${tema}]",
  "linha_2_col_3": "[dado espec√≠fico de ${tema}]",
  "linha_3_col_1": "[dado espec√≠fico de ${tema}]",
  "linha_3_col_2": "[dado espec√≠fico de ${tema}]",
  "linha_3_col_3": "[dado espec√≠fico de ${tema}]",
  "imagem_titulo": "[T√çTULO descritivo sobre ${tema}]",
  "imagem_descricao": "[DESCRI√á√ÉO do que a imagem mostra sobre ${tema}]",
  "imagem_principal": "[DESCRI√á√ÉO detalhada da imagem principal sobre ${tema}]",
  "atividade_pergunta": "[PERGUNTA espec√≠fica sobre ${tema}]",
  "opcao_a": "[alternativa A sobre ${tema}]",
  "opcao_b": "[alternativa B sobre ${tema}]",
  "opcao_c": "[alternativa C sobre ${tema}]",
  "opcao_d": "[alternativa D sobre ${tema}]",
  "conclusao_texto": "[S√çNTESE dos pontos principais sobre ${tema}]",
  "ponto_chave_1": "[PONTO-CHAVE 1 para memorizar sobre ${tema}]",
  "ponto_chave_2": "[PONTO-CHAVE 2 para memorizar sobre ${tema}]",
  "proximo_passo_1": "[PASSO 1 para continuar estudando ${tema}]",
  "proximo_passo_2": "[PASSO 2 para continuar estudando ${tema}]",
  "proximo_passo_3": "[PASSO 3 para continuar estudando ${tema}]"
}

GERE conte√∫do REAL e ESPEC√çFICO sobre "${tema}". Adapte √† faixa et√°ria de ${serie}. Use portugu√™s brasileiro correto.
`;

    case 'atividade':
      const numQuestoes = formData.numeroQuestoes || formData.quantidadeQuestoes || 5;
      const tipoQuestoes = formData.tipoQuestoes || 'mistas';
      return `
Crie uma atividade educacional ESPEC√çFICA sobre "${tema}" para ${disciplina} na ${serie}.

IMPORTANTE: As quest√µes devem ser ESPEC√çFICAS sobre "${tema}". N√ÉO use quest√µes gen√©ricas.

Retorne APENAS o JSON estruturado:

{
  "titulo": "Atividade - ${tema}",
  "professor": "${professor}",
  "data": "${data}",
  "disciplina": "${disciplina}",
  "serie": "${serie}",
  "tema": "${tema}",
  "duracao": "[dura√ß√£o adequada para resolver atividade sobre ${tema}]",
  "bncc": "[c√≥digos BNCC relevantes para ${tema}]",
  "instrucoes": "Complete as quest√µes abaixo sobre ${tema}. Leia atentamente cada enunciado antes de responder.",
  "questoes": [
    ${Array.from({length: numQuestoes}, (_, i) => `{
      "numero": ${i + 1},
      "tipo": "${tipoQuestoes === 'fechadas' ? 'multipla_escolha' : tipoQuestoes === 'abertas' ? 'aberta' : (i % 2 === 0 ? 'multipla_escolha' : 'aberta')}",
      "pergunta": "[PERGUNTA ${i + 1} espec√≠fica sobre ${tema}]",
      ${tipoQuestoes === 'fechadas' || (tipoQuestoes === 'mistas' && i % 2 === 0) ? `
      "alternativas": [
        "[alternativa A espec√≠fica sobre ${tema}]",
        "[alternativa B espec√≠fica sobre ${tema}]",
        "[alternativa C espec√≠fica sobre ${tema}]",
        "[alternativa D espec√≠fica sobre ${tema}]"
      ],
      "resposta_correta": 0` : ''}
    }`).join(',\n    ')}
  ],
  "criterios_avaliacao": [
    "Compreens√£o dos conceitos sobre ${tema}",
    "Clareza na express√£o das ideias sobre ${tema}",
    "Aplica√ß√£o correta do conhecimento sobre ${tema}"
  ]
}

GERE quest√µes REAIS e ESPEC√çFICAS sobre "${tema}". Adeque √† ${serie}. Use portugu√™s brasileiro correto.
`;

    case 'avaliacao':
      const numQuestoesAval = formData.numeroQuestoes || formData.quantidadeQuestoes || 5;
      const tipoQuestoesAval = formData.tipoQuestoes || 'mistas';
      const assuntos = formData.assuntos || formData.subjects || [tema];
      return `
Crie uma avalia√ß√£o educacional ESPEC√çFICA sobre "${tema}" e assuntos relacionados: ${assuntos.join(', ')} para ${disciplina} na ${serie}.

IMPORTANTE: As quest√µes devem ser ESPEC√çFICAS sobre "${tema}" e os assuntos informados. N√ÉO use quest√µes gen√©ricas.

Retorne APENAS o JSON estruturado:

{
  "titulo": "Avalia√ß√£o - ${tema}",
  "professor": "${professor}",
  "data": "${data}",
  "disciplina": "${disciplina}",
  "serie": "${serie}",
  "tema": "${assuntos.join(', ')}",
  "duracao": "[dura√ß√£o adequada para avalia√ß√£o sobre ${tema}]",
  "bncc": "[c√≥digos BNCC relevantes para ${tema}]",
  "instrucoes": "Responda √†s quest√µes abaixo sobre ${assuntos.join(', ')}. Esta √© uma avalia√ß√£o formal.",
  "questoes": [
    ${Array.from({length: numQuestoesAval}, (_, i) => `{
      "numero": ${i + 1},
      "tipo": "${tipoQuestoesAval === 'fechadas' ? 'multipla_escolha' : tipoQuestoesAval === 'abertas' ? 'aberta' : (i % 2 === 0 ? 'multipla_escolha' : 'aberta')}",
      "pergunta": "[PERGUNTA ${i + 1} espec√≠fica sobre ${assuntos[i % assuntos.length]}]",
      ${tipoQuestoesAval === 'fechadas' || (tipoQuestoesAval === 'mistas' && i % 2 === 0) ? `
      "alternativas": [
        "[alternativa A espec√≠fica sobre ${assuntos[i % assuntos.length]}]",
        "[alternativa B espec√≠fica sobre ${assuntos[i % assuntos.length]}]",
        "[alternativa C espec√≠fica sobre ${assuntos[i % assuntos.length]}]",
        "[alternativa D espec√≠fica sobre ${assuntos[i % assuntos.length]}]"
      ],
      "resposta_correta": 0` : ''}
    }`).join(',\n    ')}
  ],
  "criterios_avaliacao": [
    "Compreens√£o dos conceitos sobre ${tema} (25%)",
    "Clareza na express√£o das ideias (25%)",
    "Aplica√ß√£o correta do conhecimento sobre ${tema} (50%)"
  ]
}

GERE quest√µes REAIS e ESPEC√çFICAS. Use n√≠vel apropriado para avalia√ß√£o formal na ${serie}. Use portugu√™s brasileiro correto.
`;

    default:
      return `Crie um material educacional ESPEC√çFICO sobre "${tema}" para ${disciplina}, s√©rie ${serie}. GERE conte√∫do REAL baseado no tema informado. Use portugu√™s brasileiro correto.`;
  }
}

function parseGeneratedContent(materialType: string, content: string, formData: MaterialFormData): any {
  const tema = formData.tema || formData.topic || '';
  const disciplina = formData.disciplina || formData.subject || '';
  const serie = formData.serie || formData.grade || '';
  const professor = formData.professor || '';
  const data = formData.data || '';

  try {
    // Tentar parsear JSON diretamente do conte√∫do gerado
    const jsonMatch = content.match(/\{[\s\S]*\}/);
    if (jsonMatch) {
      try {
        const parsedContent = JSON.parse(jsonMatch[0]);
        
        // Garantir que os campos do formul√°rio sejam preservados
        parsedContent.professor = professor;
        parsedContent.data = data;
        parsedContent.disciplina = disciplina;
        parsedContent.serie = serie;
        parsedContent.tema = tema;

        // Para planos de aula, corrigir estrutura dos recursos APENAS se necess√°rio
        if (materialType === 'plano-de-aula' && parsedContent.desenvolvimento) {
          // Verificar se j√° est√° corretamente estruturado
          const temRecursosCorretos = parsedContent.desenvolvimento.every(etapa => 
            etapa.recursos && typeof etapa.recursos === 'string'
          );

          // Se n√£o est√° correto, aplicar l√≥gica de limpeza
          if (!temRecursosCorretos) {
            // Coletar todos os recursos √∫nicos das etapas para a se√ß√£o "recursos"
            const todosRecursos = new Set<string>();
            
            parsedContent.desenvolvimento.forEach((etapa: any) => {
              if (etapa.recursos) {
                // Se recursos √© uma string, manter como est√° (correto)
                if (typeof etapa.recursos === 'string') {
                  const recursos = etapa.recursos.split(/[,;]/).map((r: string) => r.trim()).filter((r: string) => r.length > 0);
                  recursos.forEach((recurso: string) => todosRecursos.add(recurso));
                } else if (Array.isArray(etapa.recursos)) {
                  // Se √© array, converter para string
                  etapa.recursos.forEach((recurso: string) => {
                    if (recurso && recurso.trim()) {
                      todosRecursos.add(recurso.trim());
                    }
                  });
                  etapa.recursos = etapa.recursos.join(', ');
                }
              }
            });
            
            // Atualizar se√ß√£o recursos se necess√°rio
            if (!parsedContent.recursos || parsedContent.recursos.length === 0) {
              parsedContent.recursos = Array.from(todosRecursos);
            } else {
              // Garantir que recursos seja um array limpo
              if (typeof parsedContent.recursos === 'string') {
                parsedContent.recursos = parsedContent.recursos.split(/[,;]/).map((r: string) => r.trim()).filter((r: string) => r.length > 0);
              }
              
              const recursosExistentes = Array.isArray(parsedContent.recursos) 
                ? parsedContent.recursos 
                : [];
              
              recursosExistentes.forEach((recurso: string) => todosRecursos.add(recurso));
              parsedContent.recursos = Array.from(todosRecursos);
            }
          } else {
            // Se est√° correto, apenas garantir que a se√ß√£o recursos geral seja um array
            const todosRecursos = new Set<string>();
            
            parsedContent.desenvolvimento.forEach((etapa: any) => {
              if (etapa.recursos && typeof etapa.recursos === 'string') {
                const recursos = etapa.recursos.split(/[,;]/).map((r: string) => r.trim()).filter((r: string) => r.length > 0);
                recursos.forEach((recurso: string) => todosRecursos.add(recurso));
              }
            });
            
            if (Array.isArray(parsedContent.recursos)) {
              parsedContent.recursos.forEach((recurso: string) => todosRecursos.add(recurso));
            }
            
            parsedContent.recursos = Array.from(todosRecursos);
          }
        }

        console.log('‚úÖ Conte√∫do parseado com sucesso:', materialType);
        return parsedContent;
      } catch (parseError) {
        console.error('‚ùå Erro ao parsear JSON:', parseError);
      }
    }

    // Fallback: estrutura b√°sica se n√£o conseguir parsear
    console.log('‚ö†Ô∏è Usando fallback para estrutura b√°sica');
    return {
      titulo: `${materialType} - ${tema}`,
      professor,
      data,
      disciplina,
      serie,
      tema,
      duracao: '',
      bncc: '',
      content: content
    };

  } catch (error) {
    console.error('‚ùå Erro no parseGeneratedContent:', error);
    return {
      titulo: `${materialType} - ${tema}`,
      professor,
      data,
      disciplina,
      serie,
      tema,
      duracao: '',
      bncc: '',
      content: content
    };
  }
}
