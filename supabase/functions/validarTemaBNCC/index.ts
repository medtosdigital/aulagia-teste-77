
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import Replicate from "https://esm.sh/replicate@0.25.2";

const replicateApiKey = Deno.env.get('REPLICATE_API_TOKEN');

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

async function validarTema(tema: string, disciplina: string, serie: string) {
  if (!replicateApiKey) {
    console.error('Replicate API key n√£o configurada');
    return {
      alinhado: false,
      mensagem: 'Erro ao validar tema na BNCC: API n√£o configurada.',
      sugestoes: []
    };
  }

  const prompt = `Voc√™ √© um especialista em educa√ß√£o brasileira com conhecimento PROFUNDO da BNCC (Base Nacional Comum Curricular). Sua fun√ß√£o √© realizar an√°lises ULTRA-RIGOROSAS do alinhamento de temas educacionais com a BNCC.

AN√ÅLISE CR√çTICA E RIGOROSA: Avalie se o tema "${tema}" est√° EXATAMENTE alinhado com a BNCC para a disciplina "${disciplina}" na s√©rie "${serie}".

CONTEXTO EDUCACIONAL BRASILEIRO:
- BNCC estruturada por compet√™ncias e habilidades espec√≠ficas
- Progress√£o curricular por ano/s√©rie definida
- Adequa√ß√£o ao desenvolvimento cognitivo da faixa et√°ria
- Terminologia e conceitos apropriados para cada s√©rie
- Contextualiza√ß√£o cultural e social brasileira

CRIT√âRIOS ULTRA-RIGOROSOS DE VALIDA√á√ÉO:

1. CORRESPOND√äNCIA DIRETA COM BNCC:
   ‚úì O tema deve aparecer EXPLICITAMENTE nas compet√™ncias/habilidades da BNCC
   ‚úì Deve ser espec√≠fico para "${disciplina}" na "${serie}"
   ‚úì C√≥digos de habilidades devem existir e ser aplic√°veis

2. ADEQUA√á√ÉO COGNITIVA E ET√ÅRIA:
   ‚úì Complexidade conceitual apropriada para "${serie}"
   ‚úì Vocabul√°rio e linguagem adequados √† faixa et√°ria
   ‚úì Pr√©-requisitos cognitivos atendidos

3. PROGRESS√ÉO CURRICULAR:
   ‚úì Respeita a sequ√™ncia l√≥gica da BNCC
   ‚úì N√£o antecipa conte√∫dos de s√©ries posteriores
   ‚úì N√£o repete conte√∫dos j√° superados em s√©ries anteriores

4. ESPECIFICIDADE E PRECIS√ÉO:
   ‚úì Tema n√£o pode ser muito gen√©rico ou amplo demais
   ‚úì Deve ter delimita√ß√£o clara e objetiva
   ‚úì Terminologia t√©cnica precisa e apropriada

INSTRU√á√ïES CR√çTICAS:
- Se o tema for MUITO AVAN√áADO para a s√©rie: N√ÉO ALINHADO
- Se o tema for MUITO B√ÅSICO para a s√©rie: N√ÉO ALINHADO
- Se o tema N√ÉO APARECER nas compet√™ncias BNCC da s√©rie: N√ÉO ALINHADO
- Se houver INADEQUA√á√ÉO de terminologia: N√ÉO ALINHADO
- Se o tema for GEN√âRICO DEMAIS: N√ÉO ALINHADO
- Se n√£o houver C√ìDIGOS BNCC aplic√°veis: N√ÉO ALINHADO

POSTURA ULTRA-CR√çTICA: √â MELHOR REPROVAR um tema lim√≠trofe do que aprovar incorretamente. A qualidade educacional √© prioridade absoluta.

SUGEST√ïES (se N√ÉO alinhado):
Forne√ßa 3 temas PERFEITAMENTE adequados para "${disciplina}" na "${serie}" que:
- Estejam EXPLICITAMENTE na BNCC
- Sejam espec√≠ficos e bem delimitados
- Tenham c√≥digos de habilidades claros
- Sejam culturalmente relevantes para o Brasil

FORMATO DE RESPOSTA (JSON OBRIGAT√ìRIO):
{
  "alinhado": true/false,
  "mensagem": "An√°lise CONCISA e OBJETIVA (m√°ximo 3-4 linhas) explicando o alinhamento ou desalinhamento com base nos crit√©rios BNCC",
  "sugestoes": ["Tema espec√≠fico 1 com contexto BNCC", "Tema espec√≠fico 2 com contexto BNCC", "Tema espec√≠fico 3 com contexto BNCC"] (apenas se n√£o alinhado)
}

IMPORTANTE: Mensagem deve ser EXTREMAMENTE CONCISA (m√°ximo 3-4 linhas) e T√âCNICA, focando nos aspectos espec√≠ficos da BNCC.

AN√ÅLISE DO TEMA: "${tema}" - ${disciplina} - ${serie}`;

  try {
    console.log('üîç Validando tema na BNCC com DeepSeek-V3:', { tema, disciplina, serie });
    
    // Initialize Replicate
    const replicate = new Replicate({
      auth: replicateApiKey,
    });

    // Call DeepSeek-V3 for BNCC validation
    const output = await replicate.run(
      "deepseek-ai/deepseek-v3",
      {
        input: {
          prompt: prompt,
          max_tokens: 800,
          temperature: 0.1, // Very low temperature for consistent, precise analysis
          top_p: 0.8, // Focused responses
          frequency_penalty: 0.0, // No penalty - we want precise technical language
          presence_penalty: 0.0, // No penalty for repetition of important terms
        }
      }
    );

    if (!output || (Array.isArray(output) && output.length === 0)) {
      console.error('‚ùå DeepSeek-V3 returned empty response');
      return {
        alinhado: false,
        mensagem: `N√£o foi poss√≠vel validar o tema via DeepSeek-V3. Por seguran√ßa, n√£o √© poss√≠vel prosseguir sem valida√ß√£o BNCC.`,
        sugestoes: []
      };
    }

    // Extract the content
    const content = Array.isArray(output) ? output.join('') : output;
    console.log('üìù Conte√∫do da resposta DeepSeek-V3:', content);

    try {
      // Try to extract JSON from the response
      const jsonMatch = content.match(/\{[\s\S]*\}/);
      if (jsonMatch) {
        const result = JSON.parse(jsonMatch[0]);
        console.log('‚úÖ Resultado parseado:', result);
        
        // Garantir que a resposta tenha a estrutura esperada
        return {
          alinhado: Boolean(result.alinhado),
          mensagem: result.mensagem || 'An√°lise BNCC conclu√≠da com DeepSeek-V3.',
          sugestoes: Array.isArray(result.sugestoes) ? result.sugestoes : []
        };
      } else {
        // If no JSON found, try to interpret the response
        console.log('‚ö†Ô∏è Resposta n√£o est√° em JSON, interpretando...');
        
        // Simple interpretation based on keywords
        const isAligned = content.toLowerCase().includes('alinhado') && 
                         !content.toLowerCase().includes('n√£o alinhado') && 
                         !content.toLowerCase().includes('n√£o est√° alinhado');
        
        return {
          alinhado: isAligned,
          mensagem: content.substring(0, 200) + '...', // Truncate if too long
          sugestoes: []
        };
      }
    } catch (parseError) {
      console.error('‚ùå Erro ao fazer parse da resposta JSON:', parseError, 'Conte√∫do:', content);
      return {
        alinhado: false,
        mensagem: 'Erro ao interpretar resposta da valida√ß√£o BNCC com DeepSeek-V3. Por seguran√ßa, n√£o √© poss√≠vel prosseguir.',
        sugestoes: []
      };
    }
  } catch (error) {
    console.error('‚ùå Erro na valida√ß√£o do tema com DeepSeek-V3:', error);
    return {
      alinhado: false,
      mensagem: 'Erro interno ao validar o tema na BNCC com DeepSeek-V3. Por seguran√ßa, n√£o √© poss√≠vel prosseguir sem valida√ß√£o.',
      sugestoes: []
    };
  }
}

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  if (req.method !== "POST") {
    return new Response("M√©todo n√£o permitido", { 
      status: 405, 
      headers: corsHeaders 
    });
  }

  try {
    const { tema, disciplina, serie } = await req.json();
    
    console.log('üì® Requisi√ß√£o recebida para valida√ß√£o BNCC:', { tema, disciplina, serie });
    
    if (!tema || !disciplina || !serie) {
      return new Response(
        JSON.stringify({ 
          error: "Campos obrigat√≥rios: tema, disciplina, serie",
          alinhado: false,
          mensagem: "Dados incompletos para valida√ß√£o BNCC.",
          sugestoes: []
        }),
        { 
          status: 400,
          headers: { ...corsHeaders, "Content-Type": "application/json" }
        }
      );
    }

    const resultado = await validarTema(tema, disciplina, serie);
    
    console.log('üéØ Resultado final da valida√ß√£o BNCC:', resultado);
    
    return new Response(JSON.stringify(resultado), {
      headers: { ...corsHeaders, "Content-Type": "application/json" },
    });
  } catch (error) {
    console.error('‚ùå Erro ao processar requisi√ß√£o de valida√ß√£o:', error);
    return new Response(
      JSON.stringify({ 
        error: "Erro ao processar requisi√ß√£o", 
        details: error.message,
        alinhado: false,
        mensagem: "Erro interno do servidor. Por seguran√ßa, n√£o √© poss√≠vel prosseguir sem valida√ß√£o BNCC.",
        sugestoes: []
      }),
      { 
        status: 500,
        headers: { ...corsHeaders, "Content-Type": "application/json" }
      }
    );
  }
});
