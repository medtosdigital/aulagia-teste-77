
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { DOMParser } from "https://deno.land/x/deno_dom@v0.1.43/deno-dom-wasm.ts";

const openAIApiKey = Deno.env.get('OPENAI_API_KEY');

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

interface BNCCHabilidade {
  codigo: string;
  descricao: string;
  ano: string;
  componente: string;
}

// Cache simples para armazenar dados da BNCC por sess√£o
const bnccCache = new Map<string, BNCCHabilidade[]>();

async function buscarHabilidadesBNCC(disciplina: string, serie: string): Promise<BNCCHabilidade[]> {
  const cacheKey = `${disciplina}-${serie}`;
  
  // Verificar cache primeiro
  if (bnccCache.has(cacheKey)) {
    console.log('üì¶ Usando dados do cache para:', cacheKey);
    return bnccCache.get(cacheKey) || [];
  }

  console.log('üîç Buscando dados da BNCC para:', { disciplina, serie });

  try {
    // Mapear disciplinas para os componentes da BNCC
    const componenteMap: Record<string, string> = {
      'portugu√™s': 'lingua-portuguesa',
      'portugues': 'lingua-portuguesa',
      'matem√°tica': 'matematica',
      'matematica': 'matematica',
      'hist√≥ria': 'historia',
      'historia': 'historia',
      'geografia': 'geografia',
      'ci√™ncias': 'ciencias',
      'ciencias': 'ciencias',
      'educa√ß√£o f√≠sica': 'educacao-fisica',
      'educacao fisica': 'educacao-fisica',
      'arte': 'arte',
      'ingl√™s': 'lingua-inglesa',
      'ingles': 'lingua-inglesa'
    };

    const componente = componenteMap[disciplina.toLowerCase()] || disciplina.toLowerCase();
    
    // Mapear s√©ries para anos da BNCC
    const anoMap: Record<string, string> = {
      '1¬∫ ano': '1-ano',
      '2¬∫ ano': '2-ano',
      '3¬∫ ano': '3-ano',
      '4¬∫ ano': '4-ano',
      '5¬∫ ano': '5-ano',
      '6¬∫ ano': '6-ano',
      '7¬∫ ano': '7-ano',
      '8¬∫ ano': '8-ano',
      '9¬∫ ano': '9-ano'
    };

    const ano = anoMap[serie] || serie.toLowerCase().replace(/[^0-9]/g, '') + '-ano';

    // Tentar buscar dados da BNCC
    const urls = [
      `https://basenacionalcomum.mec.gov.br/abase/#/fundamental/${componente}/${ano}`,
      `https://basenacionalcomum.mec.gov.br/abase/#/fundamental/${componente}`,
      `https://basenacionalcomum.mec.gov.br/abase/`
    ];

    let habilidades: BNCCHabilidade[] = [];

    for (const url of urls) {
      try {
        console.log('üåê Tentando buscar:', url);
        
        const response = await fetch(url, {
          headers: {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
            'Accept-Language': 'pt-BR,pt;q=0.9,en;q=0.8',
            'Cache-Control': 'no-cache'
          },
          signal: AbortSignal.timeout(10000) // 10 segundos timeout
        });

        if (!response.ok) {
          console.log(`‚ùå Erro na resposta: ${response.status}`);
          continue;
        }

        const html = await response.text();
        console.log('üìÑ HTML recebido, tamanho:', html.length);

        // Usar DOMParser para extrair dados
        const doc = new DOMParser().parseFromString(html, 'text/html');
        
        if (!doc) {
          console.log('‚ùå Erro ao parsear HTML');
          continue;
        }

        // Procurar por c√≥digos de habilidades nos padr√µes da BNCC
        const codigosEncontrados = html.match(/E[FI]\d{2}[A-Z]{2}\d{2}/g) || [];
        const descricoes = html.match(/(?:E[FI]\d{2}[A-Z]{2}\d{2})[^.]*\.(?:[^.]*\.)*?[^E]*(?=E[FI]|\n|$)/g) || [];

        console.log('üéØ C√≥digos encontrados:', codigosEncontrados.length);

        if (codigosEncontrados.length > 0) {
          for (let i = 0; i < codigosEncontrados.length; i++) {
            const codigo = codigosEncontrados[i];
            const descricao = descricoes[i] || `Habilidade relacionada ao componente ${disciplina}`;
            
            habilidades.push({
              codigo,
              descricao: descricao.replace(codigo, '').trim(),
              ano: serie,
              componente: disciplina
            });
          }
          break; // Se encontrou dados, n√£o precisa tentar outras URLs
        }

      } catch (error) {
        console.log('‚ùå Erro ao buscar URL:', url, error.message);
        continue;
      }
    }

    // Se n√£o encontrou dados no site, usar dados de fallback baseados na s√©rie/disciplina
    if (habilidades.length === 0) {
      console.log('üìã Usando dados de fallback para:', { disciplina, serie });
      habilidades = gerarHabilidadesFallback(disciplina, serie);
    }

    // Armazenar no cache
    bnccCache.set(cacheKey, habilidades);
    console.log('‚úÖ Dados armazenados no cache:', habilidades.length, 'habilidades');

    return habilidades;

  } catch (error) {
    console.error('‚ùå Erro geral ao buscar BNCC:', error);
    return gerarHabilidadesFallback(disciplina, serie);
  }
}

function gerarHabilidadesFallback(disciplina: string, serie: string): BNCCHabilidade[] {
  // Dados de fallback baseados na estrutura real da BNCC
  const fallbackData: Record<string, Record<string, BNCCHabilidade[]>> = {
    'portugu√™s': {
      '1¬∫ ano': [
        { codigo: 'EF01LP01', descricao: 'Reconhecer que textos s√£o lidos e escritos da esquerda para a direita e de cima para baixo da p√°gina.', ano: '1¬∫ ano', componente: 'L√≠ngua Portuguesa' },
        { codigo: 'EF01LP02', descricao: 'Escrever, espontaneamente ou por ditado, palavras e frases de forma alfab√©tica.', ano: '1¬∫ ano', componente: 'L√≠ngua Portuguesa' }
      ],
      '2¬∫ ano': [
        { codigo: 'EF02LP01', descricao: 'Utilizar, ao produzir o texto, grafia correta de palavras conhecidas ou com estruturas sil√°bicas j√° dominadas.', ano: '2¬∫ ano', componente: 'L√≠ngua Portuguesa' },
        { codigo: 'EF02LP02', descricao: 'Segmentar palavras em s√≠labas e remover e substituir s√≠labas iniciais, mediais ou finais para criar novas palavras.', ano: '2¬∫ ano', componente: 'L√≠ngua Portuguesa' }
      ]
    },
    'matem√°tica': {
      '1¬∫ ano': [
        { codigo: 'EF01MA01', descricao: 'Utilizar n√∫meros naturais como indicador de quantidade ou de ordem em diferentes situa√ß√µes cotidianas.', ano: '1¬∫ ano', componente: 'Matem√°tica' },
        { codigo: 'EF01MA02', descricao: 'Contar de maneira exata ou aproximada, utilizando diferentes estrat√©gias.', ano: '1¬∫ ano', componente: 'Matem√°tica' }
      ],
      '2¬∫ ano': [
        { codigo: 'EF02MA01', descricao: 'Comparar e ordenar n√∫meros naturais (at√© a ordem de centenas) pela compreens√£o de caracter√≠sticas do sistema de numera√ß√£o decimal.', ano: '2¬∫ ano', componente: 'Matem√°tica' },
        { codigo: 'EF02MA02', descricao: 'Fazer estimativas por meio de estrat√©gias diversas a respeito da quantidade de objetos de cole√ß√µes.', ano: '2¬∫ ano', componente: 'Matem√°tica' }
      ]
    }
  };

  const disciplinaKey = disciplina.toLowerCase();
  return fallbackData[disciplinaKey]?.[serie] || [
    { codigo: 'EF??XX??', descricao: `Habilidade relacionada ao tema proposto para ${disciplina}, ${serie}`, ano: serie, componente: disciplina }
  ];
}

async function validarTemaComIA(tema: string, disciplina: string, serie: string, habilidadesBNCC: BNCCHabilidade[]): Promise<any> {
  if (!openAIApiKey) {
    console.error('OpenAI API key n√£o configurada');
    return {
      alinhado: false,
      mensagem: 'Erro ao validar tema na BNCC: API n√£o configurada.',
      sugestoes: [],
      habilidades: []
    };
  }

  const habilidadesTexto = habilidadesBNCC.map(h => `${h.codigo}: ${h.descricao}`).join('\n');

  const prompt = `Voc√™ √© um especialista em educa√ß√£o brasileira e conhece profundamente a BNCC (Base Nacional Comum Curricular).

CONTEXTO REAL DA BNCC:
Disciplina: ${disciplina}
S√©rie: ${serie}
Habilidades dispon√≠veis na BNCC para esta s√©rie/disciplina:
${habilidadesTexto}

AN√ÅLISE EXTREMAMENTE RIGOROSA: Analise se o tema "${tema}" est√° EXATAMENTE alinhado com as habilidades da BNCC listadas acima para "${disciplina}" na s√©rie "${serie}".

CRIT√âRIOS ULTRA-RIGOROSOS:
1. O tema deve corresponder EXATAMENTE √†s habilidades espec√≠ficas listadas acima
2. Deve estar adequado ao n√≠vel de desenvolvimento cognitivo da faixa et√°ria
3. Deve seguir a progress√£o curricular definida pela BNCC
4. O vocabul√°rio, conceitos e complexidade devem ser apropriados para a s√©rie

INSTRU√á√ïES ESPEC√çFICAS:
- Se o tema for muito avan√ßado para a s√©rie: N√ÉO est√° alinhado
- Se o tema for muito b√°sico para a s√©rie: N√ÉO est√° alinhado  
- Se o tema n√£o aparecer nas habilidades listadas: N√ÉO est√° alinhado
- Se houver inadequa√ß√£o de terminologia ou conceitos: N√ÉO est√° alinhado
- Se o tema for muito gen√©rico para a s√©rie espec√≠fica: N√ÉO est√° alinhado

SEJA EXTREMAMENTE CR√çTICO. √â melhor reprovar um tema lim√≠trofe do que aprovar incorretamente.

Se N√ÉO estiver alinhado, forne√ßa 3 sugest√µes de temas que sejam PERFEITAMENTE adequados com base nas habilidades listadas acima.

Se ESTIVER alinhado, indique quais habilidades espec√≠ficas da lista acima se relacionam com o tema.

IMPORTANTE: A mensagem explicativa deve ter NO M√ÅXIMO 3-4 LINHAS, sendo objetiva e direta.

Responda SEMPRE em JSON no formato:
{
  "alinhado": true/false,
  "mensagem": "explica√ß√£o CONCISA e OBJETIVA (m√°ximo 3-4 linhas) sobre por que est√° ou n√£o alinhado",
  "sugestoes": ["sugest√£o 1 espec√≠fica", "sugest√£o 2 espec√≠fica", "sugest√£o 3 espec√≠fica"] (apenas se n√£o alinhado),
  "habilidades": ["EF??XX??", "EF??XX??"] (c√≥digos das habilidades relacionadas, apenas se alinhado)
}`;

  try {
    console.log('ü§ñ Validando tema com IA baseado em dados reais da BNCC');
    
    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openAIApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4o-mini',
        messages: [
          { 
            role: 'system', 
            content: 'Voc√™ √© um especialista em educa√ß√£o brasileira e BNCC. Seja EXTREMAMENTE RIGOROSO na an√°lise baseada apenas nas habilidades fornecidas. Sempre responda em portugu√™s do Brasil e seja preciso e CONCISO na an√°lise da adequa√ß√£o dos temas √† BNCC. A mensagem explicativa deve ter NO M√ÅXIMO 3-4 linhas. √â melhor reprovar um tema lim√≠trofe do que aprovar incorretamente.' 
          },
          { role: 'user', content: prompt }
        ],
        temperature: 0.1,
        max_tokens: 800
      })
    });

    if (!response.ok) {
      console.error('‚ùå Erro na requisi√ß√£o OpenAI:', response.status, response.statusText);
      return {
        alinhado: false,
        mensagem: `N√£o foi poss√≠vel validar o tema via OpenAI. Por seguran√ßa, n√£o √© poss√≠vel prosseguir sem valida√ß√£o BNCC.`,
        sugestoes: [],
        habilidades: []
      };
    }

    const data = await response.json();
    console.log('üìä Resposta da OpenAI:', data);

    if (!data.choices || !data.choices[0] || !data.choices[0].message) {
      console.error('‚ùå Resposta inv√°lida da OpenAI:', data);
      return {
        alinhado: false,
        mensagem: 'Erro ao interpretar resposta da valida√ß√£o BNCC. Por seguran√ßa, n√£o √© poss√≠vel prosseguir.',
        sugestoes: [],
        habilidades: []
      };
    }

    const content = data.choices[0].message.content;
    console.log('üìù Conte√∫do da resposta:', content);

    try {
      const result = JSON.parse(content);
      console.log('‚úÖ Resultado parseado:', result);
      
      // Garantir que a resposta tenha a estrutura esperada
      return {
        alinhado: Boolean(result.alinhado),
        mensagem: result.mensagem || 'An√°lise BNCC conclu√≠da.',
        sugestoes: Array.isArray(result.sugestoes) ? result.sugestoes : [],
        habilidades: Array.isArray(result.habilidades) ? result.habilidades : []
      };
    } catch (parseError) {
      console.error('‚ùå Erro ao fazer parse da resposta JSON:', parseError, 'Conte√∫do:', content);
      return {
        alinhado: false,
        mensagem: 'Erro ao interpretar resposta da valida√ß√£o BNCC. Por seguran√ßa, n√£o √© poss√≠vel prosseguir.',
        sugestoes: [],
        habilidades: []
      };
    }
  } catch (error) {
    console.error('‚ùå Erro na valida√ß√£o do tema:', error);
    return {
      alinhado: false,
      mensagem: 'Erro interno ao validar o tema na BNCC. Por seguran√ßa, n√£o √© poss√≠vel prosseguir sem valida√ß√£o.',
      sugestoes: [],
      habilidades: []
    };
  }
}

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  if (req.method !== "POST") {
    return new Response("M√©todo n√£o permitido", { 
      status: 405, 
      headers: corsHeaders 
    });
  }

  try {
    const { tema, disciplina, serie } = await req.json();
    
    console.log('üì® Requisi√ß√£o recebida:', { tema, disciplina, serie });
    
    if (!tema || !disciplina || !serie) {
      return new Response(
        JSON.stringify({ 
          error: "Campos obrigat√≥rios: tema, disciplina, serie",
          alinhado: false,
          mensagem: "Dados incompletos para valida√ß√£o BNCC.",
          sugestoes: [],
          habilidades: []
        }),
        { 
          status: 400,
          headers: { ...corsHeaders, "Content-Type": "application/json" }
        }
      );
    }

    // Buscar habilidades reais da BNCC
    console.log('üîç Buscando habilidades da BNCC...');
    const habilidadesBNCC = await buscarHabilidadesBNCC(disciplina, serie);
    console.log('üìö Habilidades encontradas:', habilidadesBNCC.length);

    // Validar tema com base nas habilidades reais
    const resultado = await validarTemaComIA(tema, disciplina, serie, habilidadesBNCC);
    
    console.log('üéØ Resultado final da valida√ß√£o:', resultado);
    
    return new Response(JSON.stringify(resultado), {
      headers: { ...corsHeaders, "Content-Type": "application/json" },
    });
  } catch (error) {
    console.error('‚ùå Erro ao processar requisi√ß√£o:', error);
    return new Response(
      JSON.stringify({ 
        error: "Erro ao processar requisi√ß√£o", 
        details: error.message,
        alinhado: false,
        mensagem: "Erro interno do servidor. Por seguran√ßa, n√£o √© poss√≠vel prosseguir sem valida√ß√£o BNCC.",
        sugestoes: [],
        habilidades: []
      }),
      { 
        status: 500,
        headers: { ...corsHeaders, "Content-Type": "application/json" }
      }
    );
  }
});
