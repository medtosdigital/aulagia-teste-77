
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const openAIApiKey = Deno.env.get('OPENAI_API_KEY');

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

async function validarTema(tema: string, disciplina: string, serie: string) {
  if (!openAIApiKey) {
    console.error('OpenAI API key n√£o configurada');
    return {
      alinhado: false,
      mensagem: 'Erro ao validar tema na BNCC: API n√£o configurada.',
      sugestoes: []
    };
  }

  const prompt = `Voc√™ √© um especialista em educa√ß√£o brasileira e conhece profundamente a BNCC (Base Nacional Comum Curricular). 

AN√ÅLISE EXTREMAMENTE RIGOROSA: Analise se o tema "${tema}" est√° EXATAMENTE alinhado com a BNCC para a disciplina "${disciplina}" na s√©rie "${serie}".

CRIT√âRIOS ULTRA-RIGOROSOS:
1. O tema deve corresponder EXATAMENTE √†s compet√™ncias e habilidades espec√≠ficas da BNCC para essa s√©rie e disciplina
2. Deve estar adequado ao n√≠vel de desenvolvimento cognitivo da faixa et√°ria
3. Deve seguir a progress√£o curricular definida pela BNCC
4. O vocabul√°rio, conceitos e complexidade devem ser apropriados para a s√©rie

EXEMPLOS DE AN√ÅLISE RIGOROSA:
- "Multiplica√ß√£o" para 3¬∫ Ano do Ensino Fundamental I em Matem√°tica: N√ÉO ALINHADO (multiplica√ß√£o √© introduzida no 2¬∫ ano, mas de forma muito b√°sica; o 3¬∫ ano trabalha com multiplica√ß√£o por 2, 3, 4, 5 e 10, n√£o multiplica√ß√£o em geral)
- "Equa√ß√£o do 1¬∫ grau" para 3¬∫ Ano do Ensino Fundamental I: N√ÉO ALINHADO (muito avan√ßado, esse conte√∫do √© do 7¬∫ ano)
- "Adi√ß√£o e Subtra√ß√£o com reagrupamento" para 3¬∫ Ano do Ensino Fundamental I: ALINHADO
- "Fra√ß√µes simples (1/2, 1/3, 1/4)" para 3¬∫ Ano do Ensino Fundamental I: ALINHADO

INSTRU√á√ïES ESPEC√çFICAS:
- Se o tema for muito avan√ßado para a s√©rie: N√ÉO est√° alinhado
- Se o tema for muito b√°sico para a s√©rie: N√ÉO est√° alinhado  
- Se o tema n√£o aparecer nas compet√™ncias da BNCC para essa s√©rie: N√ÉO est√° alinhado
- Se houver inadequa√ß√£o de terminologia ou conceitos: N√ÉO est√° alinhado
- Se o tema for muito gen√©rico para a s√©rie espec√≠fica: N√ÉO est√° alinhado

SEJA EXTREMAMENTE CR√çTICO. √â melhor reprovar um tema lim√≠trofe do que aprovar incorretamente.

Se N√ÉO estiver alinhado, forne√ßa 3 sugest√µes de temas que sejam PERFEITAMENTE adequados para "${disciplina}" no "${serie}" segundo a BNCC.

Responda SEMPRE em JSON no formato:
{
  "alinhado": true/false,
  "mensagem": "explica√ß√£o detalhada e espec√≠fica sobre por que est√° ou n√£o alinhado, citando a BNCC",
  "sugestoes": ["sugest√£o 1 espec√≠fica", "sugest√£o 2 espec√≠fica", "sugest√£o 3 espec√≠fica"] (apenas se n√£o alinhado)
}`;

  try {
    console.log('üîç Validando tema na BNCC:', { tema, disciplina, serie });
    
    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openAIApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4o-mini',
        messages: [
          { 
            role: 'system', 
            content: 'Voc√™ √© um especialista em educa√ß√£o brasileira e BNCC. Seja EXTREMAMENTE RIGOROSO na an√°lise. Sempre responda em portugu√™s do Brasil e seja preciso na an√°lise da adequa√ß√£o dos temas √† BNCC. √â melhor reprovar um tema lim√≠trofe do que aprovar incorretamente.' 
          },
          { role: 'user', content: prompt }
        ],
        temperature: 0.1,
        max_tokens: 1000
      })
    });

    if (!response.ok) {
      console.error('‚ùå Erro na requisi√ß√£o OpenAI:', response.status, response.statusText);
      return {
        alinhado: false, // Mudan√ßa: em caso de erro, N√ÉO permitir prosseguir
        mensagem: `N√£o foi poss√≠vel validar o tema via OpenAI. Por seguran√ßa, n√£o √© poss√≠vel prosseguir sem valida√ß√£o BNCC.`,
        sugestoes: []
      };
    }

    const data = await response.json();
    console.log('üìä Resposta da OpenAI:', data);

    if (!data.choices || !data.choices[0] || !data.choices[0].message) {
      console.error('‚ùå Resposta inv√°lida da OpenAI:', data);
      return {
        alinhado: false, // Mudan√ßa: em caso de erro, N√ÉO permitir prosseguir
        mensagem: 'Erro ao interpretar resposta da valida√ß√£o BNCC. Por seguran√ßa, n√£o √© poss√≠vel prosseguir.',
        sugestoes: []
      };
    }

    const content = data.choices[0].message.content;
    console.log('üìù Conte√∫do da resposta:', content);

    try {
      const result = JSON.parse(content);
      console.log('‚úÖ Resultado parseado:', result);
      
      // Garantir que a resposta tenha a estrutura esperada
      return {
        alinhado: Boolean(result.alinhado),
        mensagem: result.mensagem || 'An√°lise BNCC conclu√≠da.',
        sugestoes: Array.isArray(result.sugestoes) ? result.sugestoes : []
      };
    } catch (parseError) {
      console.error('‚ùå Erro ao fazer parse da resposta JSON:', parseError, 'Conte√∫do:', content);
      return {
        alinhado: false, // Mudan√ßa: em caso de erro, N√ÉO permitir prosseguir
        mensagem: 'Erro ao interpretar resposta da valida√ß√£o BNCC. Por seguran√ßa, n√£o √© poss√≠vel prosseguir.',
        sugestoes: []
      };
    }
  } catch (error) {
    console.error('‚ùå Erro na valida√ß√£o do tema:', error);
    return {
      alinhado: false, // Mudan√ßa: em caso de erro, N√ÉO permitir prosseguir
      mensagem: 'Erro interno ao validar o tema na BNCC. Por seguran√ßa, n√£o √© poss√≠vel prosseguir sem valida√ß√£o.',
      sugestoes: []
    };
  }
}

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  if (req.method !== "POST") {
    return new Response("M√©todo n√£o permitido", { 
      status: 405, 
      headers: corsHeaders 
    });
  }

  try {
    const { tema, disciplina, serie } = await req.json();
    
    console.log('üì® Requisi√ß√£o recebida:', { tema, disciplina, serie });
    
    if (!tema || !disciplina || !serie) {
      return new Response(
        JSON.stringify({ 
          error: "Campos obrigat√≥rios: tema, disciplina, serie",
          alinhado: false,
          mensagem: "Dados incompletos para valida√ß√£o BNCC.",
          sugestoes: []
        }),
        { 
          status: 400,
          headers: { ...corsHeaders, "Content-Type": "application/json" }
        }
      );
    }

    const resultado = await validarTema(tema, disciplina, serie);
    
    console.log('üéØ Resultado final da valida√ß√£o:', resultado);
    
    return new Response(JSON.stringify(resultado), {
      headers: { ...corsHeaders, "Content-Type": "application/json" },
    });
  } catch (error) {
    console.error('‚ùå Erro ao processar requisi√ß√£o:', error);
    return new Response(
      JSON.stringify({ 
        error: "Erro ao processar requisi√ß√£o", 
        details: error.message,
        alinhado: false,
        mensagem: "Erro interno do servidor. Por seguran√ßa, n√£o √© poss√≠vel prosseguir sem valida√ß√£o BNCC.",
        sugestoes: []
      }),
      { 
        status: 500,
        headers: { ...corsHeaders, "Content-Type": "application/json" }
      }
    );
  }
});
