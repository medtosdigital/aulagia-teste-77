import { createClient } from '@supabase/supabase-js';

const supabaseUrl = 'https://xmxpteviwcnrljtxvaoo.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InhteHB0ZXZpd2NucmxqdHh2YW9vIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTEyMTc5NzMsImV4cCI6MjA2Njc5Mzk3M30.-wSm455jQbizGZn4ceJATXyftbjBhfXA_l0ZZc5IieU';

const supabase = createClient(supabaseUrl, supabaseKey);

async function testUserSignup() {
  try {
    console.log('üß™ Testando processo completo de cria√ß√£o de usu√°rio...');
    
    const testEmail = `teste-${Date.now()}@exemplo.com`;
    const testPassword = '123456';
    const testName = 'Usu√°rio Teste';
    
    console.log('üìß Email de teste:', testEmail);
    console.log('üë§ Nome de teste:', testName);
    
    // 1. Tentar criar usu√°rio via Supabase Auth
    console.log('üöÄ Criando usu√°rio via Supabase Auth...');
    const { data: signUpData, error: signUpError } = await supabase.auth.signUp({
      email: testEmail,
      password: testPassword,
      options: {
        data: {
          full_name: testName
        }
      }
    });
    
    if (signUpError) {
      console.error('‚ùå Erro ao criar usu√°rio:', signUpError);
      return;
    }
    
    console.log('‚úÖ Usu√°rio criado via Auth:', signUpData.user?.id);
    console.log('üìß Email confirmado:', signUpData.user?.email_confirmed_at);
    
    // 2. Verificar se o perfil foi criado automaticamente
    console.log('üîç Verificando se perfil foi criado...');
    await new Promise(resolve => setTimeout(resolve, 2000)); // Aguardar trigger
    
    const { data: profile, error: profileError } = await supabase
      .from('perfis')
      .select('*')
      .eq('user_id', signUpData.user?.id)
      .single();
    
    if (profileError) {
      console.error('‚ùå Erro ao buscar perfil:', profileError);
    } else {
      console.log('‚úÖ Perfil criado automaticamente:', profile);
    }
    
    // 3. Tentar fazer login com o usu√°rio criado
    console.log('üîê Testando login com usu√°rio criado...');
    const { data: signInData, error: signInError } = await supabase.auth.signInWithPassword({
      email: testEmail,
      password: testPassword
    });
    
    if (signInError) {
      console.error('‚ùå Erro ao fazer login:', signInError);
    } else {
      console.log('‚úÖ Login realizado com sucesso:', signInData.user?.id);
      
      // 4. Verificar perfil ap√≥s login
      const { data: profileAfterLogin, error: profileAfterLoginError } = await supabase
        .from('perfis')
        .select('*')
        .eq('user_id', signInData.user?.id)
        .single();
      
      if (profileAfterLoginError) {
        console.error('‚ùå Erro ao buscar perfil ap√≥s login:', profileAfterLoginError);
      } else {
        console.log('‚úÖ Perfil ap√≥s login:', profileAfterLogin);
      }
    }
    
    // 5. Limpar usu√°rio de teste
    console.log('üßπ Limpando usu√°rio de teste...');
    const { error: deleteError } = await supabase.auth.admin.deleteUser(signUpData.user?.id);
    
    if (deleteError) {
      console.error('‚ùå Erro ao deletar usu√°rio de teste:', deleteError);
    } else {
      console.log('‚úÖ Usu√°rio de teste removido');
    }
    
    console.log('üéâ Teste conclu√≠do!');
    
  } catch (error) {
    console.error('üí• Erro geral:', error);
  }
}

testUserSignup(); 